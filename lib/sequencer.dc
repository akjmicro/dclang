# Simple Sequencer API

: seq_ptr_incr { seq }
  seq 1 + @ 1 +
    seq @
  %
    seq 1 +
  !
;

: seq_cur_val { seq }
  seq 1 + @ 3 + seq + @
;

: seq_cnt_incr { seq }
  seq 2 + @ 1 +
    dup
      seq seq_cur_val
    <
    if
      seq 2 + !
    else
      drop
      0 seq 2 + !
      seq seq_ptr_incr
    endif
;

: seq_signal { seq }
  seq 2 + @ 0 =
  if
    1
  else
    0
  endif
  seq seq_cnt_incr
;

# Example sequencer object
create example_seq  4 , 0 , 0 ,      # length, pointer, counter
                    4 , 2 , 2 , 3 ,  # sequence_data

# In the example above `example_seq seq_signal .`, called repeatedly, would return:
# 1 0 0 0 1 0 1 0 1 0 0 .... b/c 4 2 2 3 is the data.
