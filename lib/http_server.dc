"string.dc" import

# some important constants
7651  const HTTP_PORT
65536 const HTTP_BUFSIZE
# create a listening server and its buffer
var srv_queue   HTTP_PORT tcplisten   srv_queue !
var connbuf     HTTP_BUFSIZE mkbuf    connbuf !
var received
# connection handle lives in this net variable
var accepted_conn
# incoming request string variables
var method
var path_and_query
var httpversion
var path
var query
# strtok string-splitting token storage
var _split1
var _split2
var _split_hash
var _split_q
# response headers
"HTTP/1.1 200 OK\nContent-Type: text/plain\n\n" const HTTP_TEXT_HEADER
"HTTP/1.1 200 OK\nContent-Type: text/html\n\n"  const HTTP_HTML_HEADER
# other string constants
"?"                  const :QMARK
": "                 const :COLON
" "                  const :SPACE
"="                  const :EQUALS
"&"                  const :AMPERSAND
"<br>\n"             const :HTML_BR
"<html>\n<body>\n"   const :HTML_BODY_OPEN
"</body>\n</html>\n" const :HTML_BODY_CLOSE

# getters and setters
: get_accepted_conn   accepted_conn @ ;
: get_connbuf         connbuf @ ;
: get_received        received @ ;
: zerobuf             get_connbuf 0 HTTP_BUFSIZE memset ;
: get_method          method @ ;
: get_path_and_query  path_and_query @ ;
: get_httpversion     httpversion @ ;
: get_path            path @ ;
: get_query           query @ ;

##################
# relevant words #
##################

: read_request
  srv_queue @ tcpaccept accepted_conn !
  get_accepted_conn zerobuf HTTP_BUFSIZE read drop
  get_connbuf strdup received !
;

: read_request_cgi
  0 zerobuf HTTP_BUFSIZE read drop
  get_connbuf strdup received !
;

#############################
# `process_request` helpers #
#############################
: split_request_topline
  get_received :SPACE _split1 strtok method !
  0 :SPACE _split1 strtok path_and_query !
  0 :SPACE _split1 strtok httpversion !
;

: split_path_and_query
  get_path_and_query :QMARK _split2 strtok path !
  0 :QMARK _split2 strtok query !
;

: hash_assign
  dup :EQUALS strfind
  if
    :EQUALS _split_hash strtok
    0 :EQUALS _split_hash strtok
    swap h!
  else
    drop
  endif
  0 _split_hash !
;

: _split_query_string_helper
  0 :AMPERSAND _split_q strtok dup
  if
    strdup hash_assign
    _split_query_string_helper
  else
    drop
  endif
;

: split_query_string
  get_query
  if
    get_query
    strdup :AMPERSAND _split_q strtok dup
    if
      strdup hash_assign
      _split_query_string_helper
    else
      drop
    endif
  endif
;

#################################
# End `process_request` helpers #
#################################

#####################
# `process_request` #
#####################
: process_request
  split_request_topline
  split_path_and_query
  split_query_string
;

: _print_hash_table_helper
  1 + dup
  hkeys dup
  if
    dup
    get_query swap strfind
    if
      svpop swap dup svpush
      str+ :COLON str+ svpop h@ str+ :HTML_BR str+
      svpush
    else
      drop
    endif
    _print_hash_table_helper
  else
    drop svpop
  endif
;

: print_hash_table
  get_query
  if
    svpush -1 _print_hash_table_helper
  endif
;

: copy_header_to_buffer
  # ( zeroed_buf )
  HTTP_HTML_HEADER str+
  :HTML_BODY_OPEN str+
;

: copy_footer_to_buffer
  :HTML_BODY_CLOSE str+
;

: write_response
  "custom_response" exec   # Each bit of server code using this framework
                           # needs an implementation of `custom_response`
  get_accepted_conn get_connbuf dup strlen write drop
  get_accepted_conn close drop
  get_received free
;

: write_response_cgi
  "custom_response" exec
  1 get_connbuf dup strlen write drop
  get_received free
;

######################
# MAIN LISTENER LOOP #
######################
: _acceptloop
  read_request     # reads in the request
  process_request  # does the basic necessities like splitting the page and query
  write_response   # send the response
  _acceptloop      # infinite "wait for request" loop
;

: acceptloop
  "running acceptloop; serving on port " print HTTP_PORT . cr
  _acceptloop
  # close down connection
  srv_queue @ close drop
  "Connection closed." print cr
;

: cgi_main
  # variation of `acceptloop`: doesn't loop, and designed
  # to use for a single request/response cycle via stdin/stdout
  read_request_cgi
  process_request
  write_response_cgi
;
