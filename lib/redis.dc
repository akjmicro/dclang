###################################################################
# Still in early stages, but the idea is to implement a Redis API #
###################################################################

"string.dc" import

# constants
"localhost" const REDIS_HOST
6379 const REDIS_PORT
1024 const REDIS_BUFSIZE
REDIS_BUFSIZE mkbuf const REDIS_BUFFER

# msg variable, socket pointer variable
var msg
var redis_socket -1 redis_socket !

# various redis function API string templates
"*3\r\n$3\r\nSET\r\n${keylen}\r\n{key}\r\n${vallen}\r\n{val}\r\n" const REDIS_SET_TEMPLATE
"*2\r\n$3\r\nGET\r\n${keylen}\r\n{key}\r\n" const REDIS_GET_TEMPLATE
"{key}" const REDIS_KEY_WD
"{val}" const REDIS_VAL_WD
"{keylen}" const REDIS_KEYLEN_WD
"{vallen}" const REDIS_VALLEN_WD
"*2\r\n$4\r\nKEYS\r\n${searchlen}\r\n{search}\r\n" const REDIS_KEYSEARCH_TEMPLATE
"{search}" const REDIS_SEARCH_WD
"{searchlen}" const REDIS_SEARCHLEN_WD
"*2\r\n$3\r\nDEL\r\n${dellen}\r\n{delkey}\r\n" const REDIS_DELETE_TEMPLATE
"{delkey}" const REDIS_DELKEY_WD
"{dellen}" const REDIS_DELLEN_WD

#######################
# setters and getters #
#######################

: _get_msg msg @ ;
: _get_msglen msg @ strlen ;
: _set_msg msg ! ;

################################
# template replacement helpers #
################################

: _replace_keylen
  # ( K Tmpl ) -> ( K repl1  )
  over strlen REDIS_KEYLEN_WD swap tostr
  strreplace
;

: _replace_key
  # ( K repl1 ) (  ) -> ( repl2 ) ( )
  REDIS_KEY_WD rot
  strreplace
;

: _replace_vallen
  # ( V repl2 ) ( ) -> ( V repl3 ) ( )
  over strlen REDIS_VALLEN_WD swap tostr
  strreplace
;

: _replace_val
  # ( V repl3 ) ( ) -> ( repl3 VWD V ) ( )
  swap REDIS_VAL_WD swap
  strreplace
;

: _replace_searchlen
  over strlen REDIS_SEARCHLEN_WD swap tostr
  strreplace
;

: _replace_search
  swap REDIS_SEARCH_WD swap
  strreplace
;

######################################
# buffer and tcp communication words #
######################################

: _zero_redis_buffer
  REDIS_BUFFER 0 REDIS_BUFSIZE memset drop
;

: _msg_to_buf
  _set_msg
  _zero_redis_buffer
  REDIS_BUFFER _get_msg dup strlen mempcpy
  drop
;

: _redis_connect
  REDIS_HOST REDIS_PORT tcpconnect redis_socket !
;

: _write_redis_buffer
  redis_socket @ REDIS_BUFFER _get_msglen write drop
;

: _read_redis_buffer
  _zero_redis_buffer
  redis_socket @ REDIS_BUFFER REDIS_BUFSIZE read drop
  REDIS_BUFFER
;

: _redis_write_read
  _msg_to_buf
  _redis_connect
  _write_redis_buffer
  _read_redis_buffer
;

#########################
# MAIN PUBLIC API WORDS #
#########################

: redis_set
  depth 2 <
  if
    "redis_set needs <val_str> <key_str> on the stack!" print cr
    return
  endif
  REDIS_SET_TEMPLATE strdup
  _replace_keylen
  _replace_key
  _replace_vallen
  _replace_val
  _redis_write_read
;

: redis_get
  depth 1 <
  if
    "redis_get needs <key_str> on the stack!" print cr
    return
  endif
  REDIS_GET_TEMPLATE strdup
  _replace_keylen
  _replace_key
  _redis_write_read
;

: redis_keys
  depth 1 <
  if
    "redis_keys needs <search_str> on the stack!" print cr
    "You can try using something like:" print cr cr
    "\"*\" redis_keys print cr" print cr
    return
  endif
  REDIS_KEYSEARCH_TEMPLATE strdup
  _replace_searchlen
  _replace_search
  _redis_write_read
;

: redis_del
  depth 1 <
  if
    "redis_del needs <key_to_delete> on the stack!" print cr
    return
  endif
  svpush
  REDIS_DELETE_TEMPLATE strdup
  REDIS_DELLEN_WD
  0 svpick strlen tostr
  strreplace
  REDIS_DELKEY_WD
  svpop
  strreplace
  _redis_write_read
;
