####################################################################
# Still in early stages, but the idea is to implement a Redis API  #
#                                                                  #
# 2022-11-05: updated with a refactor to not use string templates, #
#             but rather, append elements continuously to the r/w  #
#             buffer. The first substring added is a 'header'.     #
#                                                                  #
# TODO: There is a limit now for buffer size, and thus the code is #
#       usuable for 90% of cases where there are small keys/vals,  #
#       but it not yet particularly robust for dynamically and     #
#       arbitrary message length. (Buffer size now is 1024 bytes.) #
####################################################################

"deprecated_stack.dc" import
"string.dc" import

# constants
"localhost" const REDIS_HOST
6379 const REDIS_PORT
1024 const REDIS_BUFSIZE
REDIS_BUFSIZE mkbuf const REDIS_BUFFER

# token_save space for `strtok` variable; socket pointer variable
var token_save
var redis_socket -1 redis_socket !

# various redis function API string 'headers'
"\r\n" const :RN
"\r\n$" const :RN$
"*3\r\n$3\r\nSET\r\n$" const :REDIS_SET_TEMPLATE
"*2\r\n$3\r\nGET\r\n$" const :REDIS_GET_TEMPLATE
"*2\r\n$4\r\nKEYS\r\n$" const :REDIS_SEARCH_TEMPLATE
"*2\r\n$3\r\nDEL\r\n$" const :REDIS_DELETE_TEMPLATE

######################################
# buffer and tcp communication words #
######################################

: _zero_redis_buffer
  REDIS_BUFFER 0 REDIS_BUFSIZE memset
;

: redis_connect
  REDIS_HOST REDIS_PORT tcpconnect redis_socket !
;

: _write_redis_buffer
    redis_socket @
      REDIS_BUFFER
        #_get_msglen
        dup strlen
    write
  drop
;

: _read_redis_buffer
    _zero_redis_buffer
      redis_socket @ swap
        REDIS_BUFSIZE
    read
  drop
  REDIS_BUFFER
;

: _redis_write_read
  _write_redis_buffer
  _read_redis_buffer
;

#########################
# MAIN PUBLIC API WORDS #
#########################

: redis_set
  depth 2 <
  if
    "redis_set needs <val_str> <key_str> on the stack!" print cr
    return
  endif
  swap svpush svpush
  _zero_redis_buffer
  :REDIS_SET_TEMPLATE str+
  0 svpick strlen tostr str+
  :RN str+
  svpop str+
  :RN$ str+
  0 svpick strlen tostr str+
  :RN str+
  svpop str+
  :RN str+
  drop
  _redis_write_read
  # TODO: actually check status
  drop
;

: redis_get
  depth 1 <
  if
    "redis_get needs <key_str> on the stack!" print cr
    return
  endif
  svpush
  _zero_redis_buffer
  :REDIS_GET_TEMPLATE str+
  0 svpick strlen tostr str+
  :RN str+
  svpop str+
  :RN str+
  drop
  # for now, ignore the status string and length which represents
  # the first line of the response. Our key's value sits in the
  # second line.
  _redis_write_read :RN token_save strtok drop
  null :RN token_save strtok
;

: redis_keys
  depth 1 <
  if
    "redis_keys needs <search_str> on the stack!" print cr
    "You can try using something like:" print cr cr
    "\"*\" redis_keys print cr" print cr
    return
  endif
  svpush
  _zero_redis_buffer
  :REDIS_SEARCH_TEMPLATE str+
  0 svpick strlen tostr str+
  :RN str+
  svpop str+
  :RN str+
  drop
  _redis_write_read
;

: redis_del
  depth 1 <
  if
    "redis_del needs <key_to_delete> on the stack!" print cr
    return
  endif
  svpush
  _zero_redis_buffer
  :REDIS_DELETE_TEMPLATE str+
  0 svpick strlen tostr str+
  :RN str+
  svpop str+
  :RN str+
  drop
  _redis_write_read
  # TODO: actually check status
  drop
;
