###############
# DCLANG DSP! #
###############

"deprecated_stack.dc" import

# definition of 2pi
pi 2 * const 2PI

# definition of 2 / pi
pi 2 / const PI_DIV_2

# 1 / 2pi
1 2 pi * / const INV_2PI

# sample rate and bit depth here
# can be 8000, 44100, 48000, etc.
44100 const SAMPLE_RATE

# more efficient, for multiplication
1 SAMPLE_RATE / const INV_SAMPLE_RATE

# useful in normalized frequency calculations:
2PI SAMPLE_RATE / const 2PIDSR

# 32-bit audio sample depth
0x7fffffff const BIT_DEPTH

# setup timestamp; unit will be samples.
var sample_clock
0 sample_clock !

# setup channels
var lchan
var rchan

: seconds2samples
  # (seconds -- samples )
    SAMPLE_RATE * round
;

# sample clock (timestamp) and channel routines here
: t sample_clock @ ;
: lcget lchan @ ;
: lcset lchan ! ;
: rcget rchan @ ;
: rcset rchan ! ;
: _clear_channels  0.0 lcset 0.0 rcset ;

: freq2sample_phase INV_SAMPLE_RATE * ;

#######################
# PHASORS/OSCILLATORS #
#######################

# To start with, we need to create a common, general space for phasor accumulators.
# That happens here. This is so that any new phasor automatically registers
# its value and allows the next phasor to do the same.
var _phasor_count
var _phasor_array 64 allot

: _reset_phasor_count  0 _phasor_count ! ;

: phasor_pointer _phasor_array _phasor_count @ + ;

: phasor
  # get current phase; wrap around 0-1:
  freq2sample_phase               # (smp_phase)
  # grab the accumulator value:
  phasor_pointer @ swap over      # (old_val smp_phase old_val)
  # add, wrap-around from 0.0-1.0
  + 1.0 %                         # (old_val mod1sum)
  # write back current value:
  phasor_pointer !                # (old_val)
  # update count reference (this will be reset by the clock advance) :
  _phasor_count dup @ 1 + swap !  # (old_val)
;

# a simple metronome trigger:
# ( freq -- sig )
: metro phasor 0.001 <= abs ;

# a gate signal:
# ( width freq -- sig )
: gate phasor > ;

# like a gate, but over -1 to 1 range
# ( width freq -- sig )
: pulse phasor > if 1 else -1 endif ;

# ( freq --> sine )
: sine phasor 2PI * sin ;

# FM osc; basic carrier/modulator pair
: fm { carrier_freq mod_ratio index }
  carrier_freq
    mod_ratio
  *
  sine
    index
  *
    carrier_freq
    phasor
  +
  1.0 %
  2PI *
  sin
;

# sineloop, a feedback sine wave
: sineloop { mem freq fb }
  mem @ fb *
    freq phasor
  +
  2PI *
  sin
  dup mem !
;

#########
# NOISE #
#########
# TODO: implement a better random primitive in dclang itself
# Right now, it's using `rand()`, which has problems. However,
# the randomness we were using here had its own problems, so...

: noise
  # ( -- sig )
  rand
    2
  *
    1.0
  -
;

: randint { range }             # ( range -- int )
  rand
    range
  *
  floor
;

: randtrig { compare_val hold_val }
  t 0xff and 0 =
  if
    rand compare_val < abs dup hold_val!
  else
    t 0xff and 30 <
    if
      hold_val
    else
      0
    endif
  endif
;

#########
# DELAY #
#########

2 const DELAY_HEADER_SIZE

: make_delay_line { seconds }   # ( seconds <make_delay_line> <name> )
  # Create a delay line. 'seconds' represents the maximum
  # time the delay can reach, not the actual read delay time,
  # which is controlled by `delay-read`
    var                         # ( seconds ) # <name> is consumed by the 'var' word
    seconds seconds2samples     # ( samples )
      dup                       # ( samples samples )
        here                    # ( samples samples var_addr+1 )
        1 -                     # ( samples samples var_addr )
    !                           # ( samples )  # put the delay sample size in first (0th) slot
    DELAY_HEADER_SIZE +         # ( samples+hdrsz )
  allot                         # (  )  # reserve the memory
;

: %abs { n d } n d % d + d % ;

: _set_delay_value              # ( sig delay_struct )
   dup                          # ( sig delay_struct delay_struct )
   1 + @                        # ( sig delay_struct dpos )
   DELAY_HEADER_SIZE +          # ( sig delay_struct dpos+hdr )
   + !                          # ( )
;

: _get_floor_val                # ( ds val )
    floor                       # ( ds flr_val )
      over                      # ( ds flr_val ds )
      @                         # ( ds flr_val dssize )
    %abs                        # ( ds flr_wrap )
    DELAY_HEADER_SIZE +         # ( ds flr_wrap+dhsize )
  +                             # ( ds+flr_wrap+dhsize )
  @                             # ( flr_val )
;

: _get_ceil_val                 # ( ds val )
    ceil                        # ( ds ceil_val )
      over                      # ( ds ceil_val ds )
      @                         # ( ds ceil_val dssize )
    %abs                        # ( ds ceil_wrap )
    DELAY_HEADER_SIZE +         # ( ds ceil_wrap+dhsize )
  +                             # ( ds+ceil_wrap+dhsize )
  @                             # ( ceil_val )
;


: _interpolate { real_val floor_val ceil_val }
  ceil_val floor_val -
    real_val 1.0 %
  *
    floor_val
  +
;

: delay_read { delay_struct time }      # ( delay_struct time -- delsig )
  # calc distance in delay-line:
  delay_struct 1 + @                    # ( dpos )
    time SAMPLE_RATE *                  # ( dpos tsmp )
  -                                     # ( dpos-tsmp )
                                        # ( val )
      delay_struct over                 # ( val ds val )
    _get_floor_val                      # ( val fl_val )
      over                              # ( val fl_val val )
        delay_struct swap               # ( val fl_val ds val )
      _get_ceil_val                     # ( val fl_val ceil_val )
  _interpolate                          # ( interp_val )
;

: delay_write { sig delay_struct }      # ( sig delay_struct -- )
  # put it into the current write position
  sig delay_struct _set_delay_value
  # increment the write position
  t delay_struct @ %
    delay_struct 1 +
  !
;

##############
# PORT (lag) #
##############
# A portamento (or lag) can be roughly done by grabbing and saving a previous sample,
# considering that a starting point for the next sample 'target', and making
# the decision: is this a rising slope or a falling slope? We have half-way
# point parameters for both. The algorithm is basically:
#   * fetch the previous sample value (call it the 'oldsig')
#   * fetch the current signal (call it the 'sig')
#   * if the previous sample is lower than the current signal, add:
#       sig oldsig - 0.5 * rise-time-in-samples /
#       and +/save it to the accumulator
#   * if the previous sample is higher than the current signal, add:
#       sig oldsig - 0.5 * fall-time-in-samples /
#       ...and +/save it to the accumulator
# Neat bonus: this 'port' ugen can be used to make envelopes!
# See the example file 'bell_of_doom.fs' for an example.

: _port_factor  1 swap 0.5 * SAMPLE_RATE * / ;

: make_port     # ( rise-sec fall-sec -- struct )
  create swap   # ( fall-sec rise-sec )
  0.0 , _port_factor , _port_factor ,
;

: port { sig port_struct }      # ( sig port_struct -- out_sig )
  sig port_struct @ -
    dup                         # ( sig-ps sig-ps )
  0 >                           # ( sig-ps boolup )
  if                            # ( sig-ps )
      port_struct 1 + @         # ( sig-ps rising_factor )
    *                           # ( result )
  else                          # ( sig-ps )
      port_struct 2 + @         # ( sig-ps falling_factor )
    *                           # ( result )
  endif
  dup                           # ( result result )
  port_struct @                 # ( result result oldsig )
  +                             # ( result result+oldsig )
  port_struct !                 # ( result )
;

##################
# Allpass filter #
##################
# Two delay comb-filters (feed-forward and feedback using)
# The delay lines having the same length, and a matched
# coefficient `coef` that works in opposing signs on the
# feedback and feedfoward signals

: make_allpass                  # ( dltm_max <make_allpass> <name> )
  var                           # ( dltm_max ) # consumes <name>
  seconds2samples               # ( dltm_smps )
    here 1 -                    # ( dltm_smps name_var )
      over                      # ( dltm_smps name_var dltm_smps )
      2 + 2 *                   # ( dltm_smps name_var 2*(dltm_smps+2) )
    allot                       # ( dltm_smps name_var )
        2dup                    # ( dltm_smps name_var dltm_smps name_var )
    !                           # ( dltm_smps name_var )
    over + 2 +                  # ( dltm_smps (name_var+dltm_smps+2) )
  !                             # ( )
;

: allpass { sig del dltm coef } # ( sig del dltm coef -- sig_out )
  # Based on the equation:
  # y = coef*x + x_del - coef*y_del
  # same as:
  # ( x del dltm c -- y )
  del dup                       # ( del del )
  @ 2 +                         # ( del delsize+2 )
  +                             # ( del+delsize+2 )
  dltm                          # ( del+delsize+2 dltm )
  delay_read                    # ( y_del )
  coef *                        # ( coef*y_del )
  del dltm                      # ( coef*ydel del dltm )
  delay_read                    # ( coef*y_del x_del )
  sig coef *                    # ( coef*y_del x_del coef*sig )
  +                             # ( coef*y_del  coef*sig+x_del )
  swap                          # ( coef*sig+x_del  coef*y_del )
  -                             # ( coef*sig+x_del-coef*y_del )
                                # ( y )
  dup                           # ( y y )
  del                           # ( y y del )
  dup @                         # ( y y del delsize )
  2 +                           # ( y y del delsize+2 )
  +                             # ( y y del+delsize+2 )
  delay_write                   # ( y )
  sig del                       # ( y sig del )
  delay_write                   # ( y )
;

##################
# BIQUAD FILTERS #
##################

: cutoff 0 + ;
: res 1 + ;
: theta 2 + ;
: alpha 3 + ;
: beta 4 + ;
: gamma 5 + ;
: chi 6 + ;
: mu 7 + ;
: sigma 8 + ;
: xt1 9 + ;
: yt1 10 + ;
: xt2 11 + ;
: yt2 12 + ;
: reinit 13 + ;

: reinit_biquad
  # ( struct )
  0.0 over xt1 !
  0.0 over xt2 !
  0.0 over yt1 !
  0.0 over yt2 !
  # ( struct )
;

: set_bq_type
  # ( struct reinit cutoff res type -- struct reinit cutoff res )
  4 pick
  # ( *  type struct )
  over 0 =
  if
     -1.0 over chi !
      2.0 over mu !
      1.0 over sigma !
  else
  over 1 =
  if
     1.0 over chi !
    -2.0 over mu !
     1.0 over sigma !
  else
  over 2 =
  if
     1.0 over chi !
     0.0 over mu !
    -1.0 over sigma !
  endif endif endif
  2drop
;

: set_cf_res_reinit             # ( struct reinit cutoff res )
  3 pick res !
  2 pick cutoff !
  over reinit !                 # ( struct )
;

: calc_theta                    # ( struct -- struct )
  dup cutoff @ 2PIDSR *
  over theta !                  # ( struct )
;

: calc_beta                     # ( struct -- struct )
  dup theta @ over res @        # ( struct theta res )
  over sin 0.5 *                # ( struct theta res sin(theta)*0.5 )
  over swap - -rot              # ( struct res-sin(theta)*0.5 theta res )
  swap sin 0.5 * +              # ( struct res-sin(theta)*0.5 res+sin(theta)*0.5 )
  /                             # ( (struct res-sin(theta)*0.5 / res+sin(theta)*0.5) )
  over beta !                   # struct
;

: calc_gamma                    # ( struct -- struct )
  dup beta @ 1 +                # ( struct beta+1)
  over theta @ cos *            # ( struct (beta+1)*cos(theta) )
  over gamma !                  # ( struct )
;

: calc_alpha                    # ( struct -- struct )
  dup beta @ 1 +                # ( struct beta+1 )
  over gamma @                  # ( struct beta+1 gamma )
  2 pick chi @                  # ( struct beta+1 gamma chi )
  * + 0.5 *                     # ( struct (beta+1+(gamma*chi) * 0.5) )
  over alpha !                  # ( struct )
;

: init_biquad                   # ( struct reinit cutoff res type -- struct )
  set_bq_type set_cf_res_reinit calc_theta
  calc_beta calc_gamma calc_alpha
  # check if we should reinit!
  dup reinit @ if reinit_biquad else endif
;

: biquad_compute
  # ( sig struct -- sig_out )
  # the actual transformative equation:
          2dup                  # ( sig struct sig struct )
            dup mu @            # ( sig struct sig struct mu )
            swap xt1 @          # ( sig struct sig mu xt1 )
          *                     # ( sig struct sig mu*xt1 )
            2 pick              # ( sig struct sig mu*xt1 struct )
              dup sigma @       # ( sig struct sig mu*xt1 struct sigma )
              swap xt2 @        # ( sig struct sig mu*xt1 sigma xt2 )
            *                   # ( sig struct sig mu*xt1 xt2*sigma)
          +                     # ( sig struct sig mu*xt1+xt2*sigma)
        +                       # ( sig struct sig+mu*xt1+sigma*xt2 )
        over alpha @ *          # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) )
          over gamma @          # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) gamma )
          2 pick yt1 @ *        # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 )
            2 pick beta @       # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 beta )
              3 pick yt2 @      # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 beta yt2 )
            *
          -
        +                       # ( sig struct alpha*(sig+mu*xt1+sigma*xt2)+gamma*yt1-beta*yt2 )
                                # simplification:
                                # ( sig struct sig_out )
      svpush                    # ( sig struct )                        ( sig_out )
  ##################################
  # UPDATE xt2, yt2, xt1, and yt1: #
  ##################################
        dup xt1 @               # ( sig struct xt1 )                    ( sig_out )
          over xt2              # ( sig struct xt1 xt2_addr )           ( sig_out )
      !                         # ( sig struct )                        ( sig_out )
        dup yt1 @               # ( sig struct yt1 )                    ( sig_out )
          over yt2              # ( sig struct yt1 yt2_addr )           ( sig_out )
      !                         # ( sig struct )                        ( sig_out )
          2dup xt1              # ( sig struct sig xt1_addr )           ( sig_out )
      !                         # ( sig struct )                        ( sig_out )
    swap drop                   # ( struct )                            ( sig_out )
          svpop 2dup            # ( struct sig_out struct sig_out )     ( )
          swap yt1              # ( struct sig_out sig_out yt1_addr )   ( )
      !                         # ( struct sig_out )                    ( )
    swap drop                   # ( sig_out )                           ( )
;

: make_biquad
  create
  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
;

: biquad_lp                     # ( sig struct reinit cutoff res -- sig_out )
  3 pick cutoff @ 2 pick <>     # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>        # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if                         # ( sig struct reinit cutoff res )
    0 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

: biquad_hp                     # ( sig struct reinit cutoff res -- sig_out )
  3 pick cutoff @ 2 pick <>     # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>        # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if                         # ( sig struct reinit cutoff res )
    1 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

: biquad_bp                     # ( sig struct reinit cutoff res -- sig_out )
  3 pick cutoff @ 2 pick <>     # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>        # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if                         # ( sig struct reinit cutoff res )
    2 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

#####################
# END BIQUAD FILTER #
#####################

###########################
# Hal Chamberlin's filter #
###########################
: hc_del1 0 + ;
: hc_del2 1 + ;
: hc_hp 2 + ;

: make_hc_filter create 0 , 0 , 0 , ;

: _hc_common                    # ( sig struct fc res -- out )
  1.995 * 2 swap -              # ( sig struct fc qres )
  swap 2PIDSR * swap            # ( sig struct fcf qres )
  2 pick hc_del1 @ 2 pick *
  3 pick hc_del2 @ +            # ( sig struct fcf qres hc_del1v*fc+hc_del2v )
                                # ( sig struct fcf qres lpsig )
  dup 5 pick swap - rot
  4 pick hc_del1 @ * - 0.997 *  # ( sig struct fcf lpsig sig-lpsig-qres*hc_del1v )
                                # ( sig struct fcf lpsig hpsig )
  dup 4 pick hc_hp !            # ( sig struct fcf lpsig hpsig )
  rot * 2 pick hc_del1 @ +      # ( sig struct lpsig hpsig*fc+hc_del1v )
                                # ( sig struct lpsig bpsig )
  1.0002 * 2 pick
  hc_del1 !                     # ( sig struct lpsig )
  1.0002 * dup 2 pick
  hc_del2 !                     # ( sig struct lpsig )
;

: hc_lowpass
  # ( sig struct lpsig )
  _hc_common nip nip
;

: hc_highpass
  # ( sig struct lpsig )
  _hc_common drop nip hc_hp @
;

: hc_bandpass
  # ( sig struct lpsig )
  _hc_common drop nip hc_del1 @
;

##########
# OUTPUT #
##########

# will send out to global L and R channels
# ( sig pan -- )
: panmix
  2dup
  PI_DIV_2 * sin
  * rcget + rcset
  PI_DIV_2 * cos
  * lcget + lcset
;

# sending out the signal
: sendout
  BIT_DEPTH * round bytes32
;

# stereo version of output
: stereo_out
  lcget sendout
  rcget sendout
;

# stereo signals to stack for pick-up by external API calls
: stereo_stack
  rcget lcget
;

# word to advance the clock
: t+
  1 sample_clock @ + sample_clock !
  _clear_channels
  _reset_phasor_count
;
