###############
# DCLANG DSP! #
###############

"deprecated_stack.dc" import

# definition of 2pi
pi 2 * const 2PI

# definition of 2 / pi
pi 2 / const PI_DIV_2

# 1 / 2pi
1 2 pi * / const INV_2PI

# sample rate and bit depth here
# can be 8000e, 44100e, etc. etc
44100 const SAMPLE_RATE

# more efficient, for multiplication
1 SAMPLE_RATE / const INV_SAMPLE_RATE

# useful in normalized frequency calculations:
2PI SAMPLE_RATE / const 2PIDSR

# 32-bit audio sample depth
0x7fffffff const BIT_DEPTH

# setup timestamp; unit will be samples.
var SAMPLE_CLOCK
0 SAMPLE_CLOCK !

# setup channels
var LCHAN
var RCHAN

# We need to create a common, general space for phasor accumulators.
# that happens here:
var _PHASOR_COUNT
var _PHASOR_ARRAY 64 allot

: _reset_phasor_count  0 _PHASOR_COUNT ! ;

: _advance_phasor_count _PHASOR_COUNT @ 1 + _PHASOR_COUNT ! ;

: seconds2samples SAMPLE_RATE * round ;

# sample clock (timestamp) and channel routines here
: t SAMPLE_CLOCK @ ;
: lcget LCHAN @ ;
: lcset LCHAN ! ;
: rcget RCHAN @ ;
: rcset RCHAN ! ;
: _clear_channels  0.0 lcset 0.0 rcset ;

: t+
  # advance the clock
  1 SAMPLE_CLOCK @ + SAMPLE_CLOCK !
  _clear_channels
  _reset_phasor_count
;

: freq2sample_phase INV_SAMPLE_RATE * ;

: phasor-pointer
  _PHASOR_ARRAY _PHASOR_COUNT @ +
;

###############
# OSCILLATORS #
###############

: phasor
  # get current phase; wrap around 0-1:
  freq2sample_phase
  # grab the accumulator value:
  phasor-pointer @ tuck
  # add, wrap-around from 0.0-1.0
  + 1.0 %
  # write back current value:
  phasor-pointer !
  # update count reference (this will be reset by the clock advance) :
  _advance_phasor_count
;

# a simple metronome trigger:
# ( freq -- sig )
: metro phasor 0.001 <= ;

# a gate signal:
# ( width freq -- sig )
: gate phasor > ;

# like a gate, but over -1 to 1 range
# ( width freq -- sig )
: pulse
  phasor > if 1 else -1 endif
;

# phase --> sine
: sine phasor 2PI * sin ;

# FM osc; basic carrier/modulator pair
: fm
  # ( carrier_freq mod_ratio index -- sig )
  swap 2 pick * sine *
  swap phasor + 1.0 %
  2PI * sin
;

# sineloop, a feedback sine wave
: sineloop
  # ( mem freq fb )
  2 pick @ * INV_2PI * swap phasor + 2PI * sin
  # ( mem sin((fb*memv+phs)*2PI) )
  tuck swap !
  # ( out )
;

#########
# NOISE #
#########
# TODO: implement a better random primitive in dclang itself
# Right now, it's using `rand()`, which has problems. However,
# the randomness we were using here had its own problems, so...

: noise
  # ( -- sig )
  rand 2 * 1.0 -
;

: randint
  # ( range -- int )
  rand * floor
;

var smp
var cmp
: randtrig
  cmp !
  t 0xff and 0 =
  if
    rand cmp @ < dup smp !
  else
    t 0xff and 30 <
    if
      smp @
    else
      0
    endif
  endif
;

#########
# DELAY #
#########

262144 const STORAGE_SIZE
2 const DELAY_HEADER_SIZE
DELAY_HEADER_SIZE STORAGE_SIZE + const DELAY_STRUCT_SIZE

: make-delay-line var DELAY_STRUCT_SIZE allot ;

: init-delay-line
  # ( delay-struct -- )
  STORAGE_SIZE over !
  0 over 1 + !
  STORAGE_SIZE times
    0.0 over i + DELAY_HEADER_SIZE + !
  again
  drop
;

: %abs 2dup % over + swap % swap drop ;

: _get-delay-position      1 + @ ;
: _set-delay-position      1 + ! ;
: _set-delay-value         dup _get-delay-position DELAY_HEADER_SIZE + + ! ;
: _read-delay-pos-wrapped  over @ %abs DELAY_HEADER_SIZE + + @ ;

: _get-floor-val
  2dup floor _read-delay-pos-wrapped
;

: _get-ceil-val
  2 pick 2 pick ceil _read-delay-pos-wrapped
;

: _interpolate
  # ( real-val floor-val ceil-val -- interpolated_val )
  over - rot 1.0 % * +
;

: delay-read
  # ( delay-struct time -- delsig )
  # convert time offset to samples:
  SAMPLE_RATE *
  # add distance from write offset:
  over _get-delay-position swap -
  _get-floor-val _get-ceil-val _interpolate
  swap drop
;

: delay-write
  # ( sig delay-struct -- )
  # put it into the current write position
  tuck _set-delay-value
  # increment the write position
  t over @ % swap _set-delay-position
;

##############
# PORT (lag) #
##############
# A portamento (or lag) can be roughly done by grabbing and saving a previous sample,
# considering that a starting point for the next sample 'target', and making
# the decision: is this a rising slope or a falling slope? We have half-way
# point parameters for both. The algorithm is basically:
#   * fetch the previous sample value (call it the 'oldsig')
#   * fetch the current signal (call it the 'sig')
#   * if the previous sample is lower than the current signal, add:
#       sig oldsig - 0.5 * rise-time-in-samples /
#       and +/save it to the accumulator
#   * if the previous sample is higher than the current signal, add:
#       sig oldsig - 0.5 * fall-time-in-samples /
#       ...and +/save it to the accumulator
# Neat bonus: this 'port' ugen can be used to make envelopes!
# See the example file 'bell_of_doom.fs' for an example.

: _port-factor 1 swap 0.5 * SAMPLE_RATE * / ;
: _get-rising-factor 1 + @ ;
: _get-falling-factor 2 + @ ;

: make-port
  # ( rise-sec fall-sec -- struct )
  create swap
  0.0 , _port-factor , _port-factor ,
;

: port
  # ( sig pa -- out-sig )
  tuck @ - dup
  0 >
  if
    2dup swap _get-rising-factor *
  else
    2dup swap _get-falling-factor *
  endif
  swap drop over @ + tuck swap !
;

##################
# BIQUAD FILTERS #
##################

: cutoff 0 + ;
: res 1 + ;
: theta 2 + ;
: alpha 3 + ;
: beta 4 + ;
: gamma 5 + ;
: chi 6 + ;
: mu 7 + ;
: sigma 8 + ;
: xt1 9 + ;
: yt1 10 + ;
: xt2 11 + ;
: yt2 12 + ;
: reinit 13 + ;

: reinit_biquad
  # ( struct )
  0.0 over xt1 !
  0.0 over xt2 !
  0.0 over yt1 !
  0.0 over yt2 !
  # ( struct )
;

: set_bq_type
  # ( struct reinit cutoff res type -- struct reinit cutoff res )
  4 pick
  # ( *  type struct )
  over 0 =
  if
     -1.0 over chi !
      2.0 over mu !
      1.0 over sigma !
  else
  over 1 =
  if
     1.0 over chi !
    -2.0 over mu !
     1.0 over sigma !
  else
  over 2 =
  if
     1.0 over chi !
     0.0 over mu !
    -1.0 over sigma !
  endif endif endif
  2drop
;

: set_cf_res_reinit
  # ( struct reinit cutoff res )
  3 pick res !
  2 pick cutoff !
  over reinit !
  # ( struct )
;

: calc_theta
  # ( struct -- struct )
  dup cutoff @ 2PIDSR *
  over theta !
  # ( struct )
;

: calc_beta
  # ( struct -- struct )
  dup theta @ over res @
  # ( struct theta res )
  over sin 0.5 *
  # ( struct theta res sin(theta)*0.5 )
  over swap - -rot
  # ( struct res-sin(theta)*0.5 theta res )
  swap sin 0.5 * +
  # ( struct res-sin(theta)*0.5 res+sin(theta)*0.5 )
  /
  # ( struct res-sin(theta)*0.5 / res+sin(theta)*0.5 )
  over beta !
  # struct
;

: calc_gamma
  # ( struct -- struct )
  dup beta @ 1 + over theta @ cos *
  # ( struct (beta+1)*cos(theta) )
  over gamma !
  # ( struct )
;

: calc_alpha
  # ( struct -- struct )
  dup beta @ 1 + over gamma @ 2 pick chi @ * + 0.5 *
  # ( struct beta+1+gamma_v*chi_v*0.5 )
  over alpha !
  # ( struct )
;

: init_biquad
  # ( struct reinit cutoff res type -- struct )
  set_bq_type set_cf_res_reinit calc_theta
  calc_beta calc_gamma calc_alpha
  # check if we should reinit!
  dup reinit @ if reinit_biquad else endif
;

: biquad_compute
  # ( sig struct -- sig-out )
  over svpush
  # ( sig struct )  ( sig )
  # the actual transformative equation:
  2dup dup mu @ swap xt1 @ * 2 pick dup sigma @ swap xt2 @ * + +
  # ( sig struct sig+mu*xt1+sigma*xt2 )
  # ( sig struct sig+mu*xt1+sigma*xt2 )  ( sig )
  over alpha @ *
  # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) )  ( sig )
  over gamma @ 2 pick yt1 @ *
  # ( sig struct alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 )  ( sig )
  2 pick beta @ 3 pick yt2 @ * - +
  # ( sig struct alpha*(sig+mu*xt1+sigma*xt2)+gamma*yt1-beta*yt2 )  ( sig )
  # ( sig struct sig-out )  ( sig )
  # UPDATE:
  -rot dup xt1 @ over xt2 !
  # ( sig-out sig struct )  ( sig )
  svpop over xt1 !
  # ( sig-out sig struct )  ( )
  dup yt1 @ over yt2 !
  # ( sig-out sig struct )  ( )
  nip over swap yt1 !
  # ( sig-out )  ( )
;

: make-biquad
  create
  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
;

: biquad-lp
  # ( sig struct reinit cutoff res -- sig-out )
  3 pick cutoff @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if
  # ( sig struct reinit cutoff res )
    0 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

: biquad-hp
  # ( sig struct reinit cutoff res -- sig-out )
  3 pick cutoff @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if
  # ( sig struct reinit cutoff res )
    1 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

: biquad-bp
  # ( sig struct reinit cutoff res -- sig-out )
  3 pick cutoff @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if
  # ( sig struct reinit cutoff res )
    2 init_biquad
  else
    2drop drop
  endif
  biquad_compute
;

#####################
# END BIQUAD FILTER #
#####################

###########################
# Hal Chamberlin's filter #
###########################
: hc_del1 0 + ;
: hc_del2 1 + ;
: hc_hp 2 + ;

: make-hc-filter create 0 , 0 , 0 , ;

: _hc_common
  # ( sig struct fc res -- out )
  1.995 * 2 swap -
  # ( sig struct fc qres )
  swap 2PIDSR * swap
  # ( sig struct fcf qres )
  2 pick hc_del1 @ 2 pick * 3 pick hc_del2 @ +
  # ( sig struct fcf qres hc_del1v*fc+hc_del2v )
  # ( sig struct fcf qres lpsig )
  dup 5 pick swap - rot 4 pick hc_del1 @ * - 0.997 *
  # ( sig struct fcf lpsig sig-lpsig-qres*hc_del1v )
  # ( sig struct fcf lpsig hpsig )
  dup 4 pick hc_hp !
  # ( sig struct fcf lpsig hpsig )
  rot * 2 pick hc_del1 @ +
  # ( sig struct lpsig hpsig*fc+hc_del1v )
  # ( sig struct lpsig bpsig )
  1.0002 * 2 pick hc_del1 !
  # ( sig struct lpsig )
  1.0002 * dup 2 pick hc_del2 !
  # ( sig struct lpsig )
;

: hc-lowpass
  # ( sig struct lpsig )
  _hc_common nip nip
;

: hc-highpass
  # ( sig struct lpsig )
  _hc_common drop nip hc_hp @
;

: hc-bandpass
  # ( sig struct lpsig )
  _hc_common drop nip hc_del1 @
;


##########
# OUTPUT #
##########

# will send out to global L and R channels
# ( sig pan -- )
: panmix
  2dup
  PI_DIV_2 * sin
  * rcget + rcset
  PI_DIV_2 * cos
  * lcget + lcset
;

# sending out the signal
: sendout
  BIT_DEPTH * round bytes32
;

: stereo-out
  lcget sendout
  rcget sendout
;
