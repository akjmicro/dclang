###############
# DCLANG DSP! #
###############

# definition of 2pi
pi 2 * const 2PI

# definition of 2 / pi
pi 2 / const PI_DIV_2

# sample rate and bit depth here
# can be 8000e, 44100e, etc. etc
48000 const SAMPLE_RATE

# more efficient, for multiplication
1 SAMPLE_RATE / const INV_SAMPLE_RATE

# useful in normalized frequency calculations:
2PI SAMPLE_RATE / const 2PIDSR

# 32-bit audio sample depth
0x7fffffff const BIT_DEPTH

# setup timestamp; unit will be samples.
var SAMPLE_CLOCK
0 SAMPLE_CLOCK !

# setup channels
var LCHAN
var RCHAN

# We need to create a common, general space for phasor accumulators.
# that happens here:
var _PHASOR_COUNT
var _PHASOR_ARRAY 64 allot

: _reset_phasor_count  0 _PHASOR_COUNT ! ;

: _advance_phasor_count _PHASOR_COUNT @ 1 + _PHASOR_COUNT ! ;

: seconds2samples SAMPLE_RATE * round ;

# sample clock (timestamp) and channel routines here
: t SAMPLE_CLOCK @ ;
: lcget LCHAN @ ;
: lcset LCHAN ! ;
: rcget RCHAN @ ;
: rcset RCHAN ! ;
: _clear_channels  0.0 lcset 0.0 rcset ;

: t+
  # advance the clock
  1 SAMPLE_CLOCK @ + SAMPLE_CLOCK !
  _clear_channels
  _reset_phasor_count
;

: freq2sample_phase INV_SAMPLE_RATE * ;

: phasor-pointer
  _PHASOR_ARRAY _PHASOR_COUNT @ +
;

###############
# OSCILLATORS #
###############

: phasor
  # get current phase; wrap around 0-1:
  freq2sample_phase
  # grab the accumulator value:
  phasor-pointer @
  # add, wrap-around from 0.0-1.0
  + 1.0 %
  # write back current value:
  dup phasor-pointer !
  # update count reference (this will be reset by the clock advance) :
  _advance_phasor_count
;

# a simple metronome trigger:
# ( freq -- sig )
: metro phasor 0.001 <= ;

# a gate signal:
# ( width freq -- sig )
: gate phasor > ;

# phase --> sine
: sine phasor 2PI * sin ;

# FM osc; basic carrier/modulator pair
: fm
  # ( carrier_freq mod_ratio index -- sig )
  swap 2 pick * sine *
  swap phasor + 1.0 %
  2PI * sin
;

#########
# NOISE #
#########

var div_by 0xffffffff 1 >> div_by !

var last_num clock 0xffffffff and last_num !

: bit32mask 0xffffffff and ;

: xorshift-rand
  last_num @
  dup 13 << bit32mask xor
  dup 17 >> bit32mask xor
  dup  5 << bit32mask xor
  dup last_num !
;

: noise
  # ( -- sig )
  xorshift-rand div_by / 1.0 % 2 * 1.0 -
;

: randint
  # ( range -- int )
  noise abs * floor
;


#########
# DELAY #
#########

SAMPLE_RATE 8 * const 8SEC_STORAGE_SIZE
2 const DELAY_HEADER_SIZE
DELAY_HEADER_SIZE 8SEC_STORAGE_SIZE + const DELAY_STRUCT_SIZE

: make-delay-line var DELAY_STRUCT_SIZE allot ;

: init-delay-line
  # ( delay-struct -- )
  8SEC_STORAGE_SIZE over !
  0 over 1 + !
  8SEC_STORAGE_SIZE times
    0.0 over i + DELAY_HEADER_SIZE + !
  again
  drop
;

: %abs 2dup % over + swap % swap drop ;

: _get-delay-position      1 + @ ;
: _set-delay-position      1 + ! ;
: _set-delay-value         dup _get-delay-position DELAY_HEADER_SIZE + + ! ;
: _read-delay-pos-wrapped  over @ %abs DELAY_HEADER_SIZE + + @ ;

: _get-floor-val
  2dup floor _read-delay-pos-wrapped
;

: _get-ceil-val
  2 pick 2 pick ceil _read-delay-pos-wrapped
;

: _interpolate
  # ( real-val floor-val ceil-val -- interpolated_val )
  over - rot 1.0 % * +
;

: delay-read
  # ( delay-struct time -- delsig )
  # convert time offset to samples:
  SAMPLE_RATE *
  # add distance from write offset:
  over _get-delay-position swap -
  _get-floor-val _get-ceil-val _interpolate
  swap drop
;

: delay-write
  # ( sig delay-struct -- )
  # put it into the current write position
  tuck _set-delay-value
  # increment the write position
  t over @ % swap _set-delay-position
;

##############
# PORT (lag) #
##############
# A portamento (or lag) can be roughly done by grabbing and saving a previous sample,
# considering that a starting point for the next sample 'target', and making
# the decision: is this a rising slope or a falling slope? We have half-way
# point parameters for both. The algorithm is basically:
#   * fetch the previous sample value (call it the 'oldsig')
#   * fetch the current signal (call it the 'sig')
#   * if the previous sample is lower than the current signal, add:
#       sig oldsig - 0.5 * rise-time-in-samples /
#       and +/save it to the accumulator
#   * if the previous sample is higher than the current signal, add:
#       sig oldsig - 0.5 * fall-time-in-samples /
#       ...and +/save it to the accumulator
# Neat bonus: this 'port' ugen can be used to make envelopes!
# See the example file 'bell_of_doom.fs' for an example.

: _port-factor 1 swap 0.5 * SAMPLE_RATE * / ;
: _get-rising-factor 1 + @ ;
: _get-falling-factor 2 + @ ;

: make-port
  # ( rise-sec fall-sec -- struct )
  create swap
  0.0 , _port-factor , _port-factor ,
;

: port
  # ( sig pa -- out-sig )
  tuck @ - dup
  0 >
  if
    2dup swap _get-rising-factor *
  else
    2dup swap _get-falling-factor *
  endif
  swap drop over @ + tuck swap !
;

###########
# FILTERS #
###########

: _xt0_coef 0 + ;
: _xt1_val 1 + ;
: _xt1_coef 2 + ;
: _yt1_val 3 + ;
: _yt1_coef 4 + ;

: _reinit-filter1 5 times 0 over i + ! again drop ;

: make-filter1 create 5 allot ;

: update-filter1
  # This is where you give your filter its coefficients
  # ( flt yt1cf xt1cf xt0cf -- )
  3 pick _xt0_coef !
  2 pick _xt1_coef !
  swap _yt1_coef !
;

: filter1
  # This is actually the signal processor
  # ( sig flt reinit -- output-sig )
  if
    dup _reinit-filter1
  endif
  # ( sig flt )
  dup _xt0_coef @ 2 pick *
  # ( sig flt xt0cf*sig )
  over dup _xt1_val @ swap _xt1_coef @ *
  # ( sig flt xt0cf*sig xt1val*xt1cd  )
  3 pick 3 pick _xt1_val !
  # ( sig flt xt0cf*sig xt1val*xt1cd  )
  2 pick dup _yt1_val @ swap _yt1_coef @ *
  # ( sig flt xt0 xt1 yt1*yt1cf )
  -1 * + +
  # ( sig flt new_y )
  swap 2dup _yt1_val !
  # ( sig new_y flt )
  rot drop drop
  # ( new_y )
;

#########################
# BIQUAD LOWPASS FILTER #
#########################

: cutoff 0 + ;
: res 1 + ;
: theta 2 + ;
: alpha 3 + ;
: beta 4 + ;
: gamma 5 + ;
: xt1 6 + ;
: yt1 7 + ;
: xt2 8 + ;
: yt2 9 + ;
: reinit 10 + ;

: reinit_biquad
  # ( struct )
  0.0 over xt1 !
  0.0 over xt2 !
  0.0 over yt1 !
  0.0 over yt2 !
  # ( struct )
;

: set_cf_res_reinit
  # ( struct reinit cutoff res )
  3 pick res !
  2 pick cutoff !
  over reinit !
  # ( struct )
;

: calc_theta
  # ( struct -- struct )
  dup cutoff @ 2PIDSR *
  over theta !
  # ( struct )
;

: calc_beta
  # ( struct -- struct )
  dup theta @ over res @
  # ( struct theta res )
  over sin 0.5 *
  # ( struct theta res sin(theta)*0.5 )
  over swap - -rot
  # ( struct res-sin(theta)*0.5 theta res )
  swap sin 0.5 * +
  # ( struct res-sin(theta)*0.5 res+sin(theta)*0.5 )
  /
  # ( struct res-sin(theta)*0.5 / res+sin(theta)*0.5 )
  over beta !
  # struct
;

: calc_gamma
  # ( struct -- struct )
  dup beta @ 1 + over theta @ cos *
  # ( struct (beta+1)*cos(theta) )
  over gamma !
  # ( struct )
;

: calc_alpha
  # ( struct -- struct )
  dup beta @ 1 + over gamma @ -1 * + 0.5 *
  # ( struct beta+1+(-gamma)*0.5 )
  over alpha !
  # ( struct )
;

: init_biquad
  # ( struct reinit cutoff res )
  set_cf_res_reinit calc_theta
  calc_beta calc_gamma calc_alpha
  # check if we should reinit!
  dup reinit @ if reinit_biquad else endif
;

: biquad_compute
  # ( sig struct -- sig-out )
  over savepush
  # ( sig struct )  ( sig )
  # the actual transformative equation:
  over over xt1 @ 2 * 2 pick xt2 @ + +
  # ( sig struct sig+2*xt1+xt2 )  ( sig )
  over alpha @ *
  # ( sig struct alpha*(sig+2*xt1+xt2) )  ( sig )
  over gamma @ 2 pick yt1 @ *
  # ( sig struct alpha*(sig+2*xt1+xt2) gamma*yt1 )  ( sig )
  2 pick beta @ 3 pick yt2 @ * - +
  # ( sig struct alpha*(sig+2*xt1+xt2)+gamma*yt1-beta*yt2 )  ( sig )
  # ( sig struct sig-out )  ( sig )
  # UPDATE:
  -rot dup xt1 @ over xt2 !
  # ( sig-out sig struct )  ( sig )
  savepop over xt1 !
  # ( sig-out sig struct )  ( )
  dup yt1 @ over yt2 !
  # ( sig-out sig struct )  ( )
  nip over swap yt1 !
  # ( sig-out )  ( )
;

: make-biquad
  create
  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
;

: biquad-lp
  # ( sig struct reinit cutoff res -- sig-out )
  3 pick cutoff @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff  )
  4 pick res @ 2 pick <>
  # ( sig struct reinit cutoff res bool_cfdiff bool_resdiff )
  or if
  # ( sig struct reinit cutoff res )
    init_biquad
  else
    2drop drop
  endif
  biquad_compute
;
#####################
# END BIQUAD FILTER #
#####################


##########
# OUTPUT #
##########

# will send out to global L and R channels 
# ( sig pan -- )
: panmix
  2dup
  PI_DIV_2 * sin
  * lcget + lcset
  PI_DIV_2 * cos
  * rcget + rcset
;

# sending out the signal
: sendout
  BIT_DEPTH * round bytes32
;

: stereo-out
  lcget sendout
  rcget sendout
;
