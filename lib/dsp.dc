###############
# DCLANG DSP! #
###############

"deprecated_stack.dc" import

# definition of 2pi
pi 2 * const 2PI

# definition of 2 / pi
pi 2 / const PI_DIV_2

# 1 / 2pi
1 2 pi * / const INV_2PI

# sample rate and bit depth here
# can be 8000, 44100, 48000, etc.
44100 const SAMPLE_RATE

# more efficient, for multiplication
1 SAMPLE_RATE / const INV_SAMPLE_RATE

# useful in normalized frequency calculations:
2PI SAMPLE_RATE / const 2PIDSR

# 32-bit audio sample depth
0x7fffffff const BIT_DEPTH

# useful for correcting phase drift (see `phasor`)
1 BIT_DEPTH / const INV_BIT_DEPTH

# setup timestamp; unit will be samples.
var sample_clock
0 sample_clock !

# setup channels
var lchan
var rchan

: seconds2samples
  # (seconds -- samples )
    SAMPLE_RATE * round
;

# sample clock (timestamp) and channel routines here
: t sample_clock @ ;
: lcget lchan @ ;
: lcset lchan ! ;
: rcget rchan @ ;
: rcset rchan ! ;
: _clear_channels  0.0 lcset 0.0 rcset ;

#######################
# PHASORS/OSCILLATORS #
#######################

# To start with, we need to create a common, general space for phasor accumulators.
# That happens here. This is so that any new phasor automatically registers
# its value and allows the next phasor to do the same.
var _phasor_count
var _phasor_array 64 allot

: _reset_phasor_count  0 _phasor_count ! ;

: phasor_pointer _phasor_array _phasor_count @ + ;

: phasor { freq }
    phasor_pointer @
      dup
        freq INV_SAMPLE_RATE *
      +
      1.0 %
      #########################
      # FP drift checks/reset #
      #########################
      dup INV_BIT_DEPTH <=
      if
        drop
        0
      endif
      1 over - INV_BIT_DEPTH <=
      if
        drop
        0
      endif
      ##########################
      # End drift checks/reset #
      ##########################
    # increment phasor_pointer's value
    phasor_pointer !
    # increment _phasor_count by 1
    _phasor_count dup @ 1 + swap !
;

# a simple metronome trigger:
# ( freq -- sig )
: metro phasor 0.001 <= abs ;

# a gate signal:
# ( width freq -- sig )
: gate phasor > abs ;

# like a gate, but over -1 to 1 range
# ( width freq -- sig )
: pulse phasor > if 1 else -1 endif ;

: tri  # (freq -- sig)
  phasor
  dup floor -
  dup 0.5 < if
    2 * 1 -
  else
    2 * -1 +
  endif
;

# ( freq --> sine )
: sine phasor 2PI * sin ;

# FM osc; basic carrier/modulator pair
: fm { carrier_freq mod_ratio index }
  carrier_freq
    mod_ratio
  *
  sine
    index
  *
    carrier_freq
    phasor
  +
  1.0 %
  2PI *
  sin
;

# sineloop, a feedback sine wave
: sineloop { mem freq fb }
  mem @ fb * INV_2PI *
    freq phasor
  +
  2PI *
  sin
  dup mem !
;

#########
# NOISE #
#########
# TODO: implement a better random primitive in dclang itself
# Right now, it's using `rand()`, which has problems. However,
# the randomness we were using here had its own problems, so...

: noise  # ( -- sig )
  rand
    2
  *
    1.0
  -
;

: randint { range }  # ( range -- int )
  rand
    range
  *
  floor
;

: randtrig { compare_val hold_var }
  t 0xff and 0 =
  if
    rand compare_val < abs dup hold_var !
  else
    t 0xff and 30 <
    if
      hold_var @
    else
      0
    endif
  endif
;

#########
# DELAY #
#########

2 const DELAY_HEADER_SIZE

: make_delay_line { seconds }   # ( seconds <make_delay_line> <name> )
  # Create a delay line. 'seconds' represents the maximum
  # time the delay can reach, not the actual read delay time,
  # which is controlled by `delay-read`
    var                         # ( seconds ) # <name> is consumed by the 'var' word
    seconds seconds2samples     # ( samples )
      dup                       # ( samples samples )
        here                    # ( samples samples var_addr+1 )
        1 -                     # ( samples samples var_addr )
    !                           # ( samples )  # put the delay sample size in first (0th) slot
    DELAY_HEADER_SIZE +         # ( samples+hdrsz )
  allot                         # (  )  # reserve the memory
;

: %abs { n d } n d % d + d % ;

: _set_delay_value              # ( sig delay_struct )
   dup                          # ( sig delay_struct delay_struct )
   1 + @                        # ( sig delay_struct dpos )
   DELAY_HEADER_SIZE +          # ( sig delay_struct dpos+hdr )
   + !                          # ( )
;

: _get_floor_val                # ( ds val )
    floor                       # ( ds flr_val )
      over                      # ( ds flr_val ds )
      @                         # ( ds flr_val dssize )
    %abs                        # ( ds flr_wrap )
    DELAY_HEADER_SIZE +         # ( ds flr_wrap+dhsize )
  +                             # ( ds+flr_wrap+dhsize )
  @                             # ( flr_val )
;

: _get_ceil_val                 # ( ds val )
    ceil                        # ( ds ceil_val )
      over                      # ( ds ceil_val ds )
      @                         # ( ds ceil_val dssize )
    %abs                        # ( ds ceil_wrap )
    DELAY_HEADER_SIZE +         # ( ds ceil_wrap+dhsize )
  +                             # ( ds+ceil_wrap+dhsize )
  @                             # ( ceil_val )
;

: _interpolate { real_val floor_val ceil_val }
  ceil_val floor_val -
    real_val 1.0 %
  *
    floor_val
  +
;

: delay_read { delay_struct time }      # ( delay_struct time -- delsig )
  # calc distance in delay-line:
  delay_struct 1 + @                    # ( dpos )
    time SAMPLE_RATE *                  # ( dpos tsmp )
  -                                     # ( dpos-tsmp )
                                        # ( val )
      delay_struct over                 # ( val ds val )
    _get_floor_val                      # ( val fl_val )
      over                              # ( val fl_val val )
        delay_struct swap               # ( val fl_val ds val )
      _get_ceil_val                     # ( val fl_val ceil_val )
  _interpolate                          # ( interp_val )
;

: delay_write { sig delay_struct }      # ( sig delay_struct -- )
  # put it into the current write position
  sig delay_struct _set_delay_value
  # increment the write position
  t delay_struct @ %
    delay_struct 1 +
  !
;

##############
# PORT (lag) #
##############
# A portamento (or lag) can be roughly done by grabbing and saving a previous sample,
# considering that a starting point for the next sample 'target', and making
# the decision: is this a rising slope or a falling slope? We have half-way
# point parameters for both. The algorithm is basically:
#   * fetch the previous sample value (call it the 'oldsig')
#   * fetch the current signal (call it the 'sig')
#   * if the previous sample is lower than the current signal, add:
#       sig oldsig - 0.5 * rise-time-in-samples /
#       and +/save it to the accumulator
#   * if the previous sample is higher than the current signal, add:
#       sig oldsig - 0.5 * fall-time-in-samples /
#       ...and +/save it to the accumulator
# Neat bonus: this 'port' ugen can be used to make envelopes!
# See the example file 'bell_of_doom.fs' for an example.

: _port_factor  1 swap 0.5 * SAMPLE_RATE * / ;

: make_port     # ( rise-sec fall-sec -- struct )
  create swap   # ( fall-sec rise-sec )
  0.0 , _port_factor , _port_factor ,
;

: port { sig port_struct }      # ( sig port_struct -- out_sig )
  sig port_struct @ -
    dup                         # ( sig-ps sig-ps )
  0 >                           # ( sig-ps boolup )
  if                            # ( sig-ps )
      port_struct 1 + @         # ( sig-ps rising_factor )
    *                           # ( portsig )
  else                          # ( sig-ps )
      port_struct 2 + @         # ( sig-ps falling_factor )
    *                           # ( portsig )
  endif
  port_struct @                 # ( portsig oldsig )
  + dup                         # ( portsig+oldsig portsig+oldsig )
  port_struct !                 # ( portsig+oldsig )
;

#################################
# Lowpass (simple non-resonant) #
#################################
: lowpass { sig memvar pole }  # (sig memvar pole -- newsig )
  sig 1 pole - *
    memvar @ pole *
  +
    dup
  memvar !
;

##################
# Allpass filter #
##################
# Two delay comb-filters (feed-forward and feedback using)
# The delay lines having the same length, and a matched
# coefficient `coef` that works in opposing signs on the
# feedback and feedfoward signals

: make_allpass                  # ( dltm_max <make_allpass> <name> )
  var                           # ( dltm_max ) # consumes <name>
  seconds2samples               # ( dltm_smps )
    here 1 -                    # ( dltm_smps name_var )
      over                      # ( dltm_smps name_var dltm_smps )
      2 + 2 *                   # ( dltm_smps name_var 2*(dltm_smps+2) )
    allot                       # ( dltm_smps name_var )
        2dup                    # ( dltm_smps name_var dltm_smps name_var )
    !                           # ( dltm_smps name_var )
    over + 2 +                  # ( dltm_smps (name_var+dltm_smps+2) )
  !                             # ( )
;

: allpass { sig ap_struct dltm coef } # ( sig ap_struct dltm coef -- sig_out )
  # Based on the equation:
  # y = coef*x + x_del - coef*y_del
  # same as:
  # ( x ap_struct dltm c -- y )
  ap_struct dup                 # ( ap_struct ap_struct )
  @ 2 +                         # ( ap_struct delsize+2 )
  +                             # ( ap_struct+delsize+2 )
  dltm                          # ( ap_struct+delsize+2 dltm )
  delay_read                    # ( y_del )
  coef *                        # ( coef*y_del )
  ap_struct dltm                # ( coef*ydel ap_struct dltm )
  delay_read                    # ( coef*y_del x_del )
  sig coef *                    # ( coef*y_del x_del coef*sig )
  +                             # ( coef*y_del  coef*sig+x_del )
  swap                          # ( coef*sig+x_del  coef*y_del )
  -                             # ( coef*sig+x_del-coef*y_del )
                                # ( y )
  dup                           # ( y y )
  ap_struct                     # ( y y ap_struct )
  dup @                         # ( y y ap_struct delsize )
  2 +                           # ( y y ap_struct delsize+2 )
  +                             # ( y y ap_struct+delsize+2 )
  delay_write                   # ( y )
  sig ap_struct                 # ( y sig ap_struct )
  delay_write                   # ( y )
;

##################
# BIQUAD FILTERS #
##################

0 const :cutoff
1 const :res
2 const :theta
3 const :alpha
4 const :beta
5 const :gamma
6 const :chi
7 const :mu
8 const :sigma
9 const :xt1
10 const :yt1
11 const :xt2
12 const :yt2
13 const :reinit

#################################
# biquad initialization helpers #
#################################

: _set_bq_type { struct type }   # ( struct type --  )
  type 0 =
  if
     -1.0 struct :chi + !
      2.0 struct :mu + !
      1.0 struct :sigma + !
  else
  type 1 =
  if
     1.0 struct :chi + !
    -2.0 struct :mu + !
     1.0 struct :sigma + !
  else
  type 2 =
  if
     1.0 struct :chi + !
     0.0 struct :mu + !
    -1.0 struct :sigma + !
  endif endif endif
;

: _set_cf_res_reinit { struct reinit cutoff res }
  res struct :res + !
  cutoff struct :cutoff + !
  reinit struct :reinit + !
;

: _calc_theta  { struct }        # ( struct -- )
  struct :cutoff + @             # ( cutoff_val )
  2PIDSR *                       # ( cutoff_val*2PIDSR )
  struct :theta +                # ( cutoff_val*2PIDSR theta_addr )
  !                              # poked into theta
;

: _calc_beta  { struct tmp }    # ( struct tmp -- )
  struct :res + @               # ( res )
  struct :theta + @             # ( res theta )
  sin 0.5 *                     # ( res sin(theta)*0.5 )
  2dup                          # ( res sin(theta)*0.5 res sin(theta)*0.5 )
  +                             # ( res sin(theta)*0.5 res+sin(theta)*0.5 )
  tmp!                          # ( res sin(theta)*0.5  <in_tmp> )
  -                             # ( res-sin(theta)*0.5  <in_tmp> )
  tmp                           # ( res-sin(theta)*0.5 res+sin(theta)*0.5 )
  /                             # ( (res-sin(theta)*0.5)/(res+sin(theta)*0.5) ) # answer
  struct :beta + !              # poked into beta
;

: _calc_gamma  { struct }       # ( struct -- )
  struct :beta + @ 1 +          # ( beta+1 )
  struct :theta + @ cos *       # ( (beta+1)*cos(theta) )
  struct :gamma +               # ( (beta+1)*cos(theta) gamma_addr )
  !                             # poked into gamma
;

: _calc_alpha { struct }        # ( struct -- )
  struct :beta + @ 1 +          # ( beta+1 )
  struct :gamma + @             # ( beta+1 gamma )
  struct :chi + @               # ( struct beta+1 gamma chi )
  * + 0.5 *                     # ( (beta+1+(gamma*chi))*0.5 )
  struct :alpha +               # ( (beta+1+(gamma*chi))*0.5 alpha_addr )
  !                             # poked into alpha
;

: _reinit_biquad { struct }     # ( struct -- )
  0.0 struct :xt1 + !
  0.0 struct :xt2 + !
  0.0 struct :yt1 + !
  0.0 struct :yt2 + !
;

#######################################################################
# entry-point for all biquad initialization, which uses above helpers #
#######################################################################
: _init_biquad  { struct reinit cutoff res type }    # ( struct reinit cutoff res type -- )
  struct type               _set_bq_type
  struct reinit cutoff res  _set_cf_res_reinit
  struct                    _calc_theta
  struct 0                  _calc_beta
  struct                    _calc_gamma
  struct                    _calc_alpha
  # check if we should reinit!
  struct :reinit + @ if
    struct _reinit_biquad
  endif
;

: biquad_compute { sig struct }
  # ( sig struct -- sig_out )
  # the actual transformative equation:
  struct :mu + @                # ( mu )
  struct :xt1 + @               # ( mu xt1 )
  *                             # ( mu*xt1 )
  struct :sigma + @             # ( mu*xt1 sigma )
  struct :xt2 + @               # ( mu*xt1 asigma xt2 )
  *                             # ( mu*xt1 xt2*sigma)
  +                             # ( mu*xt1+xt2*sigma)
  sig +                         # ( sig+mu*xt1+sigma*xt2 )
  struct :alpha + @             # ( sig+mu*xt1+sigma*xt2 alpha )
  *                             # ( alpha*(sig+mu*xt1+sigma*xt2 alpha) )
  struct :gamma + @             # ( alpha*(sig+mu*xt1+sigma*xt2) gamma )
  struct :yt1 + @               # ( alpha*(sig+mu*xt1+sigma*xt2) gamma yt1 )
  *                             # ( alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 )
  struct :beta + @              # ( alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 beta )
  struct :yt2 + @               # ( alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 beta yt2 )
  *                             # ( alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1 beta*yt2 )
  -                             # ( alpha*(sig+mu*xt1+sigma*xt2) gamma*yt1-beta*yt2 )
  +                             # ( alpha*(sig+mu*xt1+sigma*xt2)+gamma*yt1-beta*yt2 )
                                # simplification:
                                # ( sig_out )
  ##################################
  # UPDATE xt2, yt2, xt1, and yt1: #
  ##################################
  struct :xt1 + @               # ( sig_out xt1_val )
  struct :xt2 +                 # ( sig_out xt1_val xt2_addr )
  !                             # ( sig_out )
  struct :yt1 + @               # ( sig_out yt1_val )
  struct :yt2 +                 # ( sig_out yt1_val yt2_addr )
  !                             # ( sig_out )
  sig                           # ( sig_out sig )
  struct :xt1 +                 # ( sig_out sig xt1_addr )
  !                             # ( sig_out )
  dup                           # ( sig_out sig_out )
  struct :yt1 +                 # ( sig_out sig_out yt1_addr )
  !                             # ( sig_out )
;

#############################################
# The 'public' API words for biquad filters #
#############################################

: make_biquad
  create
  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
;

: biquad_lp  { sig struct reinit cutoff res }   # ( sig struct reinit cutoff res -- sig_out )
  struct :cutoff + @ cutoff <>                  # ( bool_cfdiff  )
  struct :res + @ res <>                        # ( bool_cfdiff bool_resdiff )
  or if
    struct reinit cutoff res 0    _init_biquad
  endif
  sig struct    biquad_compute
;

: biquad_hp  { sig struct reinit cutoff res }   # ( sig struct reinit cutoff res -- sig_out )
  struct :cutoff + @ cutoff <>                  # ( bool_cfdiff  )
  struct :res + @ res <>                        # ( bool_cfdiff bool_resdiff )
  or if
    struct reinit cutoff res 1    _init_biquad
  endif
  sig struct    biquad_compute
;

: biquad_bp  { sig struct reinit cutoff res }   # ( sig struct reinit cutoff res -- sig_out )
  struct :cutoff + @ cutoff <>                  # ( bool_cfdiff  )
  struct :res + @ res <>                        # ( bool_cfdiff bool_resdiff )
  or if
    struct reinit cutoff res 1    _init_biquad
  endif
  sig struct    biquad_compute
;

#####################
# END BIQUAD FILTER #
#####################

###########################
# Hal Chamberlin's filter #
###########################
0 const _hc_bpdel
1 const _hc_lpdel
2 const _hc_lpout # lowpass
3 const _hc_bpout # bandpass
4 const _hc_hpout # highpass
5 const _hc_ntout # notch

: make_hc_filter var 6 allot ;

: _hc_common { sig struct fc res }  # ( sig struct fc res -- out )
  ##################################
  # First,  scale resonance and fc #
  ##################################
  2 res 1.995 * - res!
  fc 2PIDSR * fc!
    struct _hc_lpdel + @
      struct _hc_bpdel + @
        fc
      *
    +
      dup
    struct _hc_lpout + !
      sig
      swap
    -
      res
        struct _hc_bpdel + @
      *
    -
      dup
    struct _hc_hpout + !
      fc
    *
      struct _hc_bpdel + @
    +
  struct _hc_bpout + !
    struct _hc_hpout + @
      struct _hc_lpout + @
    +
  struct _hc_ntout + !
  # store delays for next go-round
    struct _hc_bpout + @
  struct _hc_bpdel + !
    struct _hc_lpout + @
  struct _hc_lpdel + !
;

: hc_lowpass { sig struct fc res }   # ( sig struct fc res -- out )
  sig struct fc res  _hc_common
  struct _hc_lpout + @
;

: hc_highpass { sig struct fc res }  # ( sig struct fc res -- out )
  sig struct fc res  _hc_common
  struct _hc_hpout + @
;

: hc_bandpass { sig struct fc res }  # ( sig struct fc res -- out )
  sig struct fc res  _hc_common
  struct _hc_bpout + @
;

: hc_notch { sig struct fc res }     # ( sig struct fc res -- out )
  sig struct fc res  _hc_common
  struct _hc_ntout + @
;

##############
# FDN Reverb #
##############

# The reverb_struct layout:
# --------------------------------------------------------------------
# |junction|lpf0|lpf1...|lpf8|deltime0|...|deltime7|delay0|...|delay7|
# --------------------------------------------------------------------

0.1 seconds2samples  const REV_DELAY_SIZE
REV_DELAY_SIZE 2 +   const REV_MEM_SIZE
17                   const REV_HEADER_SIZE
9                    const REV_DELAY_LENGTHS
1                    const REV_FILTERS

: make_reverb_struct
  var                            # `var` will consume the next token as a name
    9 allot                      # Junction, plus 8 delay line lpfilter states.

    2473 INV_SAMPLE_RATE * ,     # The delay read times, taken from csound's
    2767 INV_SAMPLE_RATE * ,     # `reverbsc` code and UDO. Other primes can
    3217 INV_SAMPLE_RATE * ,     # certainly be experimented with...N.B. these
    3557 INV_SAMPLE_RATE * ,     # are designed for sr=44100.
    3907 INV_SAMPLE_RATE * ,
    4127 INV_SAMPLE_RATE * ,
    2143 INV_SAMPLE_RATE * ,
    1933 INV_SAMPLE_RATE * ,
    8 times                      # The delay lines proper, 8 of them
      REV_DELAY_SIZE ,
      0 ,
      REV_DELAY_SIZE 1 + allot   # added 1 to `allot` because it's normally designed to subtract 1.
    again
;

# cutoff and feedback are in the 0-1 range
: reverb { sigL sigR reverb_struct cutoff feedback }
  ######################################################################
  # First, normalize and adjust cutoff.                                #
  # Map 0 -> 1 and 1 -> 0.5 so that our input is 0 for dark (total     #
  # filtering) and 1 is bright (half-filtering). This is b/c `lowpass` #
  # uses a pole as input, so 0 would be no filtering and 1 would be    #
  # total filtering....                                                #
  ######################################################################
  1 cutoff - 0.5 * 0.5 + cutoff!
  ###############################################################
  # For each delay line, add the alternating sigL/sigR input    #
  # together with the junction signal (which starts as 0)       #
  # minus the lowpass filter instance output.                   #
  # Although we _could_ do this as a times/again loop to be     #
  # expressive, a bit of old fashioned loop-unrolling is called #
  # for here, for performance reasons.                          #
  ###############################################################
    reverb_struct REV_MEM_SIZE 0 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 0 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 0 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigL
      +
    +
      reverb_struct REV_MEM_SIZE 0 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 1 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 1 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 1 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigR
      +
    +
      reverb_struct REV_MEM_SIZE 1 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 2 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 2 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 2 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigL
      +
    +
      reverb_struct REV_MEM_SIZE 2 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 3 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 3 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 3 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigR
      +
    +
      reverb_struct REV_MEM_SIZE 3 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 4 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 4 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 4 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigL
      +
    +
      reverb_struct REV_MEM_SIZE 4 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 5 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 5 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 5 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigR
      +
    +
      reverb_struct REV_MEM_SIZE 5 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 6 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 6 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 6 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigL
      +
    +
      reverb_struct REV_MEM_SIZE 6 * REV_HEADER_SIZE + +
  delay_write
    reverb_struct REV_MEM_SIZE 7 * REV_HEADER_SIZE + +
      reverb_struct REV_DELAY_LENGTHS 7 + + @
    delay_read
    feedback *
      reverb_struct REV_FILTERS 7 + +
        cutoff
    lowpass
      dup
    svpush
    -1 *
      reverb_struct @
        sigR
      +
    +
      reverb_struct REV_MEM_SIZE 7 * REV_HEADER_SIZE + +
  delay_write
  ##################################################################
  # Set the saved lowpass signals onto the stack.                  #
  #                                                                #
  # Top-of-stack at the end will be rchan, so ideally, user pans   #
  # that hard right. Under that will be lchan, so pan hard left.   #
  # Although of course, one is free to do whatever, including      #
  # mixing them both center, or adding them and mixing them center #
  # Or whatever...                                                 #
  ##################################################################
    1 svpick 3 svpick 5 svpick 7 svpick + + + 0.25 *
      0 svpick 2 svpick 4 svpick 6 svpick + + + 0.25 *
        ###################################################################
        # Now, pop the save stack all off, add together and scale for the #
        # next iteration of the scattering juncture.                      #
        ###################################################################
        svpop svpop svpop svpop svpop svpop svpop svpop
        + + + + + + +
        0.25 *
      reverb_struct !
;

##########
# OUTPUT #
##########

# will send out to global L and R channels
# ( sig pan -- )
: panmix
  2dup
  PI_DIV_2 * sin
  * rcget + rcset
  PI_DIV_2 * cos
  * lcget + lcset
;

# sending out the signal
: sendout
  BIT_DEPTH * round bytes32
;

# stereo version of output
: stereo_out
  lcget sendout
  rcget sendout
;

# stereo signals to stack for pick-up by external API calls
: stereo_stack
  rcget lcget
;

# word to advance the clock
: t+
  1 sample_clock @ + sample_clock !
  _clear_channels
  _reset_phasor_count
;
