"deprecated_stack.dc" import

# Set up a small _private_ buffer for doing string slices.
# Used by `strslice` below
1024 const SLICEBUFSIZE
var _slicebuf
SLICEBUFSIZE mkbuf _slicebuf !
# some error messages we re-use
"error: strslice: cannot slice a string with the start_idx > end_idx!"
const :STRSLICE_NOT_LTE_ERROR
"error: strslice: cannot slice a string with negative indices!"
const :STRSLICE_NEG_ERROR

: strdup
  # copies a string; leaves the new string's
  # beginning address on the stack
  dup strlen 1 +
  swap over mkbuf
  swap 2 pick mempcpy
  swap -
;

: str+
  dup strlen mempcpy
;

: strslice
  # (string_addr start_idx end_idx)
  # validation steps:
  2dup <= not
  if
    :STRSLICE_NOT_LTE_ERROR print cr
    clear return
  endif
  2dup
  0 <
  if
    :STRSLICE_NEG_ERROR print cr
    clear return
  endif
  0 <
  if
    :STRSLICE_NEG_ERROR print cr
    clear return
  endif
  # first clear the _strslice buffer:
  _slicebuf @ 0 SLICEBUFSIZE memset drop
  # now, actually deal with the user input:
  over -
  svpush +
  svpush
  _slicebuf @ svpop svpop mempcpy
  drop
  _slicebuf @
;

: str_between
  # ( str_pnt bottom top ) .s
  2 pick           # ( str_pnt bottom top str_pnt )
  str< not svpush  # ( str_pnt bottom ) ( not_outside )
  str< not         # ( not_outside ) ( not_outside )
  svpop and
;

: _incr_saved_counter
  svpop 1 + svpush
;

: _substr_count_helper
  # ( substr str ) ( 0 ) -> ( cnt ) ( )
  over strfind dup
  if
    _incr_saved_counter
    over strlen +
    _substr_count_helper
  else
    2drop svpop
  endif
;

: substr_count
  # ( str substr ) -> # ( substr str ) ( 0 )
  0 svpush swap
  _substr_count_helper
;

: _setup_replace_buffer
  # ( str findstr replacestr times )
  rot rot
  strlen swap strlen - *
  swap strlen +
  mkbuf
;

: _strreplace_setup
  # ( str find repl )
  2 pick 2 pick substr_count
  # ( str find repl count )
  2over 2over _setup_replace_buffer
  # ( str find repl count buffer )
  nip
  # ( str find repl buffer )
  swap
  # ( str find buffer repl )
  svpush
  # ( str find buffer ) ( repl )
  -rot
  # ( buffer str find ) ( repl )
  svpop
  # ( buffer str find repl )
;

: _strreplace_helper
  2over 2over drop strfind dup
  # ( buffer str find repl buffer found found ) ( buffer )
  if
  # ( buffer str find repl buffer found ) ( buffer )
    dup svpush
    # ( buffer str find repl buffer found ) ( found buffer )
    4 pick tuck -
    # ( buffer str find repl buffer str sz ) ( found buffer )
    mempcpy over dup strlen mempcpy
    # ( buffer str find repl newbufrepl ) ( found buffer )
    svpop 3 pick strlen +
    # ( buffer str find repl newbufrepl found+findlen ) ( buffer )
    2rot 2drop 2swap
    # ( newbufrepl found+findlen find repl ) ( buffer )
    _strreplace_helper
  else
  # ( buffer str find repl buffer found ) ( buffer )
    2drop 2drop dup strlen
  # ( buffer str sz )
    mempcpy drop svpop
  # ( buffer )
  endif
;

: strreplace
  depth 3 <
  if
    "strreplace needs <haystack> <needle> <replacement_needle> on the stack"
    print cr
    return
  endif
  _strreplace_setup
  # ( buffer str find repl )
  3 pick svpush
  # ( buffer str find repl ) ( buffer )
  _strreplace_helper
;

: _get_next_num_from_line
  # need a strtok ptr and a linestr_ptr
  # ( ss lp ) ()
  svpush svpush
  # ( ) ( lp ss )
  # return early if the line point is itself null
  1 svpick @ null =
  if
    svdrop svdrop
    0 return
  endif
  0 svpick @ null =
  if
    1 svpick @ " \n" 0 svpick strtok
    svdrop svdrop
  else
    null " \n" 0 svpick strtok
    svdrop svdrop
  endif
;

: next_num_from_file
  # an iterator over a file with just whitespace separated numbers
  # start with <strtok_space> <linestr_space> <open_file_pointer>
  # on the data stack
  # ( ss lp fp ) ()
  svpush svpush svpush
  # () ( fp lp ss )
  0 svpick 1 svpick _get_next_num_from_line
  dup 0 =
  if
    drop
    0 0 svpick !
    2 svpick @ freadline
    -1 =    # -1 == EOF (end-of-file)
    if
      drop
      0 0 svpick !
      0 1 svpick !
      svdrop svdrop svdrop
      0 return
    else
      1 svpick !
      0 svpick 1 svpick _get_next_num_from_line
      svdrop svdrop svdrop
      return
    endif
  else
    svdrop svdrop svdrop
    return
  endif
;

: _freadall_helper
  dup svpush
  1024 fread
  1024 <
  if
    svpop 2drop
    return
  else
    svpop
    _freadall_helper
  endif
;

: freadall
  # read an entire file into a memory buffer
  depth 2 <
  if
    "freadall needs <buf_ptr> <file_ptr> on the stack!" print cr
    return
  endif
  _freadall_helper
;
