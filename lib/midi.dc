# In this file, I'm experimenting with what I call "stack indentation" w/tabbing
# 2021-03-30

var mididev
var inbuf
var direction
var midi_ctl_slots 128 allot
var midi_channel_last_note 16 allot

: setup_port
    "DCLANG_MIDI_PORT_DIRECTION"
    envget
      "write"
    str=
  if
      "DCLANG_MIDI_PORT"
      envget
        "wb"
      fopen
        mididev
    !
  else
      "DCLANG_MIDI_PORT"
      envget
        2048    # 2048 = non-blocking read-only
      open
    mididev !
      1
      mkbuf
    inbuf !
  endif
;

setup_port

: get_mididev mididev @ ;
: get_inbuf inbuf @ ;

: _get_midi_byte
        get_mididev get_inbuf 1
    read
      0
    >
  if
      inbuf @
      ord
        0xff
    and
  else
    0xff
  endif
;

# Use this every 16, 32, 64, etc. samples or so
# This will update the `midi_ctl_slots` variable
: refresh_midictl
      _get_midi_byte 0xf0
    and
      0xb0
    =
  if
        _get_midi_byte _get_midi_byte
        swap  # ( val ctrlnum )
          midi_ctl_slots
        +
    !
  endif
;

# This is the main API for grabbing a controller variable
# ( ctrlnum -- sig )
: midictl midi_ctl_slots + @ ;

# output words
: send_midi
  # ( status_byte v1 v2 )
        get_mididev redirect
      svpush
    svpush
  emit
    svpop
  emit
    svpop
  emit
  flush
  resetout
;

: send_midi_reverse
  # sometimes, it's easier to have the stack be queued out such
  # the the top-of-stack goes out first. So, in this case, one would
  # for example put the volumn, then the note, then the status_byte
  # on the stack in that order. Then it's a simple matter of emitting
  # three times with zero stack-dancing or svpush or swapping involved.
  get_mididev redirect
  emit emit emit
  flush resetout
;

: panic
    get_mididev
  redirect
        128 0 1
  for
      0x80 i 0
    send_midi
      0.01
    sleep
  next
  resetout
;

# words for microtonal/alternate tuning musical applications

: _bend_to_MSB_LSB_bytes
  # a helper function. Given a top-of-stack 14-byte integer MIDI
  # pitch-bend amount, replace the top-of-stack with two bytes,
  # the top-of-stack being the LSB (least significant byte) and the next
  # being the most significant byte
  dup 7 >>
  swap 0x7f and
;


# Set the default variable 'midi_edo' to 31. Can be changed by the user later...
var midi_edo
31 midi_edo !

: edo_degree_to_midi
  # input stack (rightmost is "top":
  # ( volume, edo_degree, midi_channel )
  #
  # Take an input edo degree, calculate the octave fraction against the global
  # EDO constant, which must be declared ahead-of-time, and emit midi bytes
  # to the configured MIDI output device which will sound the correct pitch
  # Middle-C is assumed to be "0" in all EDOs, so use negative numbers to go
  # below middle-C.
  svpush              # sequester the channel number away
  midi_edo @ / 12 *   # scale to 12-EDO with fractional remainder
  60.5 +              # shift to middle-C in MIDI, also overshoot fractional
  dup floor swap      # part on purpose so we can fetch the floor closest
                      # to the proper midi number; set aside by swap
  over - 0.5 -        # grab fractional part and cancel previous 0.5 shift
  4096 *              # scale by positive half step of bend
  8192 +              # center zero at halfway for +/-
  # stack now looks like:
  # ( volume midi_note_number midi_bend ) ( midi_channel )
  _bend_to_MSB_LSB_bytes
  # now we have
  # ( volume midi_note_number bend_MSB bend_LSB ) ( midi_channel )
  # send the bend
  0 svpick 0xE0 +
  send_midi_reverse
  # send the note
  svpop 0x90 +
  send_midi_reverse
;
