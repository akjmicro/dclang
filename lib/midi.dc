"PORTMIDI_IN_DEVNUM"  const :PORTMIDI_IN_DEVNUM
"PORTMIDI_OUT_DEVNUM" const :PORTMIDI_OUT_DEVNUM

# These will be used again (unused ATM) once MIDI read functionality
# is re-implemented via `portmidi`
var midi_ctl_slots 128 allot
var midi_channel_last_note 16 allot

: midi_shutdown
  _pm_close
  _pm_terminate
;

: check_mididev
  # Set to stderr printing
  seterr
  # First, list MIDI devices found:
  cr "Here are your available MIDI devices:" print cr
  _pm_list cr
  # Try to set output device
  :PORTMIDI_OUT_DEVNUM envget dup
  0 =
  if
    :PORTMIDI_OUT_DEVNUM print " is not set in your environment!" print cr
    "MIDI output functionality will not work." print cr
    "If you need this, please exit from dclang, set that value, and try again!" print cr
    drop
  else
      tonum
        "Opening output device number: " print dup . cr
    _pm_open_out
  endif
  # Try to set input device
  :PORTMIDI_IN_DEVNUM envget dup
  0 =
  if
    :PORTMIDI_IN_DEVNUM print " is not set in your environment!" print cr
    "MIDI input functionality will not work." print cr
    "If you need this, please exit from dclang, set that value, and try again!" print cr
    drop
  else
      tonum
        "Opening input device number: " print dup . cr
    _pm_open_in
  endif
  # Reset to stdout printing
  setout
;

check_mididev

# update midictl state by polling for incoming messages
: refresh_midictl
  _pm_read
  0xff and 0xb0 =
  if
    midi_ctl_slots + !
  else
    2drop
  endif
;

# This is the main API for grabbing a controller variable
# ( ctrlnum -- sig )
: midictl midi_ctl_slots + @ ;

# basic connection words
: send_midi _pm_ws ;

: send_midi_reverse _pm_wsr ;

# useful for when things go nuts!
: panic
        128 0 1
  for
      0x80 i 0
    send_midi
      0.01
    sleep
  next
;

: _bend_to_MSB_LSB_bytes
  # a helper function. Given a top-of-stack 14-byte integer MIDI
  # pitch-bend amount, replace the top-of-stack with two bytes,
  # the top-of-stack being the LSB (least significant byte) and the next
  # being the most significant byte
  dup 7 >>
  swap 0x7f and
;
