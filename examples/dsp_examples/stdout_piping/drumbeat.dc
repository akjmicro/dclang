"dsp.dc" import

# Make a 32-step sequencer
var top_bit       1 31 << top_bit !
# A variable to track which bit in the sequence we are on.
# As the sequence progresses, the bit slot gets smaller
# by a factor of two, i.e. 1024, 512, 256, 128, ....
var seq_bit       top_bit @ seq_bit !

# Bit patterns for beats!
# TODO var closed_hihat   0x
var op_hihat      0x00000004   op_hihat !
var cl_hihat      0x22423242   cl_hihat !
var snare_drum    0x08080808 snare_drum !
var bass_drum     0x80808080  bass_drum !
# set the tempo
var tempo         120 4 * 60 / tempo !
var curtrig
var lasttrig

0.001 0.06 make_port general_env_port
var general_env
0.001 0.18 make_port ophh_env_port
var ophh_env
# masking volumes
var op_hihat_vol
var cl_hihat_vol
var snare_drum_vol
var bass_drum_vol

make_hc_filter cl_hihat_flt
make_hc_filter op_hihat_flt

: move_bit
  seq_bit @ 1 >> dup
  0 =
  if
    drop
    top_bit @ seq_bit !
  else
    seq_bit !
  endif
;

: bit_on? { this_var }
  seq_bit @
    dup
      this_var @
    and
  = abs
;

: drumbeat_example
  inf times
    tempo @ metro
    dup curtrig !
    dup general_env_port  port  general_env !
           ophh_env_port  port     ophh_env !
    curtrig @ lasttrig @ >
    if
      bass_drum  bit_on?   bass_drum_vol !
      snare_drum bit_on?  snare_drum_vol !
      cl_hihat   bit_on?    cl_hihat_vol !
      op_hihat   bit_on?    op_hihat_vol !
      move_bit
    endif
    # bass drum sound
    general_env @ 90 * 90 + sine
    general_env @ *
    bass_drum_vol @ *
    0.5 panmix
    # snare drum sound
    noise general_env @ * 0.4 *
      383 sine general_env @ * 0.3 *
    +
    snare_drum_vol @ *
    0.3 panmix
    # closed hihat sound
    noise general_env @ * 0.2 *
    cl_hihat_flt 2110 0.6 hc_bandpass
    cl_hihat_vol @ *
    0.7 panmix
    # open hihat sound
    noise ophh_env @ * 0.3 *
    op_hihat_flt 2300 0.7 hc_bandpass
    op_hihat_vol @ *
    0.7 panmix
    # OUTPUT
    stereo_out
    curtrig @ lasttrig !
    t+
  again
;

drumbeat_example
