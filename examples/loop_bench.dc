"deprecated_stack.dc" import

: present-results
  "The sum is: " print . cr
  swap -
  "The time difference is: " print . "seconds" print cr
;

: sl-helper
  # ( sum max cur )
  rot       # ( max cur sum )
  over      # ( max cur sum cur )
  +         # ( max cur sum1 )
  rot rot   # ( cur sum1 max -- sum1 max cur )
;

: recur-loop
  1 +        # sum cur'
  tuck       # cur' sum cur'
  +          # cur' sum'
  swap       # sum' cur'
  dup        # sum' cur' cur'
  20000000 <>
  if
    recur-loop
  endif
;

: test-recur
  clock
  0 0 recur-loop   # clock sum cur func
  clock            # clock sum cur clock'
  swap             # clock sum clock' cur
  drop swap        # clock clock' sum
;

: testfor
  clock 0
  20000001 0 1 for
    i +
  next
  clock
  swap
;

: testtimes
  clock 0
  20000001 times
    i +
  again
  clock
  swap
;

: testtimes-var
  clock
  0 0 !
  20000001 times
    0 @ i + 0 !
  again
  0 @
  clock
  swap
;

"\nThis will show how various ways of composing loops are more efficient.
In general, go with the simplest case, and avoid logical and stack
operations inside of loops, when you can.  Hence, the the first 'manual'
loop here, using indexing via recursion, is the worst performer, and the
simple 'times' loop at the end is the fastest. For extra interest, we
have added a 'times' loop benchmark where the variable being incremented
lives in the memory heap instead of right on the stack, as a 4th example
" print

"\nTesting loop using recursion\n" print
test-recur
present-results

"\nTesting loop using 'for'\n" print
testfor
present-results

"\nTesting loop using 'times'\n" print
testtimes
present-results

"\nTesting loop using 'times' and poking/peeking a variable\n" print
testtimes-var
present-results
