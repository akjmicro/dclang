# This illustrates using decimal expansions of a fraction division in any base
# being used to make music via MIDI
#
# First, make sure you have a running redis server on your machine
#
# Then, to run, do `redis-cli` in a shell, making sure you set the following vars:
#     tempo, base, div, mode, transp
# (they should all be integers)
#
# Then, in another shell, open this script, your command should be:
# dclang midi_from_redis.dc

"math.dc" import
"midi.dc" import
"redis_midi.dc" import

# our EDO var
41 midi_edo !

: generate_interval
  / log2 midi_edo @ * round
;

: drop_oct midi_edo @ - ;

9 8 generate_interval const 2ND
5 4 generate_interval const 3RD
4 3 generate_interval const 4TH
3 2 generate_interval const 5TH
8 5 generate_interval const 6TH
16 9 generate_interval const b7TH

create scale 0 drop_oct , 4TH drop_oct , 5TH drop_oct , 6TH drop_oct , b7TH drop_oct ,
             0 , 2ND , 3RD , 4TH , 5TH , 6TH, b7TH , midi_edo @ ,
var dummy
var scale_size
dummy scale -
scale_size !
var x
0 x !

: x++
  x @ 1 +
  x !
;

: _get_next_note
  # x @ 13 * 17 xor 19 +
  x @ get_div *
    get_base
  digit_sum
    get_mode
  +
    scale_size @
  absmod
    scale
  + @
    get_transpose
  +
  x++
;

: _get_on_length
  _get_tempo 0.25 *
  _get_gate *
;

: _get_off_length
  _get_tempo 0.25 *
  1 _get_gate - *
;

: _midi_from_redis
  block_sigint
  ###
    100
      _get_next_note
      dup svpush
        0
  edo_degree_to_midi
  ###
    _get_on_length
  sleep
        0 svpop 0
  edo_degree_to_midi
    _get_off_length
  sleep
  unblock_sigint
  _midi_from_redis
;

: midi_from_redis
  "You are now entering an endless loop, hit CTRL-C to stop..." print cr
  "Notice that you won't be able to stop until a note off event hits." print cr
  "In this way, the notes end cleanly!" print cr
  _midi_from_redis
;

midi_from_redis

panic
