"http_server.dc" import
"redis.dc" import

redis_connect

"sliders.html" "r" fopen dup
freadall drop const SLIDER_HTML fclose

# string constants
"base" const :base
"mul" const :mul
"wrap" const :wrap
"mode" const :mode
"<html><body>OK<br>\n</body></html>\n" const :OK

: custom_response
  get_path
  "/send_value" str=
  if
    get_query :base strfind
    if
      :base h@ dup
      if
        :base redis_set
      endif
    else
    get_query :mul strfind
    if
      :mul h@ dup
      if
        :mul redis_set
      endif
    else
    get_query :wrap strfind
    if
      :wrap h@ dup
      if
        :wrap redis_set
      endif
    else
    get_query :mode strfind
    if
      :mode h@ dup
      if
        :mode redis_set
      endif
    endif endif endif endif
    zerobuf HTTP_HTML_HEADER str+
    :OK str+
    drop
  else
    zerobuf HTTP_HTML_HEADER str+
    SLIDER_HTML str+
    drop
  endif
;

: write_response
  custom_response                                        # To customize the response,
  get_accepted_conn get_connbuf HTTP_BUFSIZE write drop  # should always be here
  get_accepted_conn close drop                           # should always be here
;

: acceptloop
  srv_queue @ tcpaccept accepted_conn !
  read_incoming    # reads in the request
  process_request  # does the basic necessities like splitting the page and query
  write_response   # send the response
  acceptloop       # infinite "wait for request" loop
;

"running acceptloop; serving on port " print HTTP_PORT . cr
acceptloop

# close down connection
srv_queue @ close drop
