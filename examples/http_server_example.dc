"http_server.dc" import

: copy_response_to_buffer
  # This reponse code is a simple demo that enumerates the input GET request
  # It can/should be customized to suit whatever your response needs are.
  # You could also read a variable that might branch according to endpoint
  # routing, so you serve different pages, etc. etc. This could perhaps
  # be fed by something set in the calling `acceptloop` word (see below)
  # after the initial `process_request` word runs, and before the call to
  # `write_response`.
  "Incoming path was: " str+
  get_path str+ "<br>\n" str+
  "Query string was: " str+
  get_query
    dup
    if
      str+
    else
      drop
    endif
  "<br>\nHash Table Entries: <br>\n" str+
  print_hash_table
;

: custom_response
  # an example typical response body is defined here...there are other possibilities
  zerobuf
  copy_header_to_buffer    # <-- a standard HTTP header and HTML header
                           # (can be changed as needed, but exists as a helper in the http_server lib)
  copy_response_to_buffer  # <-- this can be customized to suit your response needs
  copy_footer_to_buffer    # <-- this is here to close off the standard HTML header
                           # (whether preset or not depends on whether `copy_header_to_buffer` was used)
                           # (exists as a helper in the http_server lib
;

acceptloop
