############################################################################
# This module was written so that I could have a clearer understanding     #
# of the musical implications of the various variable settings involved    #
# in the midi_digit_sum* examples.                                         #
#                                                                          #
# There are 2 public words: `run_sample` and `range_sample`                #
#                                                                          #
# `run_sample` will show `end - start` (default 8192) iterations of        #
# the output of `digit_sum`, given the variables set by the user.          #
# These variables are defined below, but can be changed so various         #
# behaviors can be studied, and a new run kicked off with `run_sample`.    #
# Some documention of these variables is inline below, as comments.        #
#                                                                          #
# `range_sample` will vary the `mul` from 2 to 512 and do a `run_sample`   #
# on each iteration. It will output lines that represent:                  #
#                                                                          #
#   <current_mul> <min_count> <max_count> <max_count / min_count>          #
#                                                                          #
# ....where <min_count> is the digit_sum __least hit__ during the run,     #
# and <max_count> represents the digit_sum __most hit__ during the run.    #
# This allow one to understand the "meta-features" of a given run of       #
# `digit_sum` given a certain `base`, `wrap`, `shift`, and `outer_wrap`,   #
# while the `mul` changes. Using the MIDI examples, this will have musical #
# implications.                                                            #
############################################################################

"math.dc" import

32 const FIGURE_STORAGE_SIZE
var figures FIGURE_STORAGE_SIZE allot

var start
0 start !

var end
8192 end !

# `mul` and `base` are the core args consumed by `digit_sum`
var mul
1 mul !

var base
2 base !

# `wrap` is the largest digit sum (prior to shifting) that you
# want to "wrap" (AKA do a modulus operation) around.
var wrap
32 wrap !

# `shift` offsets the resulting digit_sum by the assigned amount.
var shift
0 shift !

# `outer_wrap` would, for example, represent the largest digit_sum
# _after shifting_ that you'd want to "wrap" (AKA do an `absmod` modulus wrap)
# around. Can be the same.
var outer_wrap
32 outer_wrap !

: _clear_figures
  FIGURE_STORAGE_SIZE times
    0 figures i + !
  again
;

: _show_figures
  FIGURE_STORAGE_SIZE times
    i 2 0 .pz "\b: " print
    figures i + @ 5 0 .pz cr
  again
;

: _run_sample_inner
  end @ start @ 1
  for
    mul @ i * base @ digit_sum
    wrap @ absmod shift @ + outer_wrap @ absmod
    figures + dup @ 1 + swap !
  next
;

################
# The main API #
################

: run_sample
  _clear_figures
  _run_sample_inner
  _show_figures
;

: range_sample
  513 2 1
  for
    i mul !
    _clear_figures
    _run_sample_inner
    figures wrap @ sortnums
    i 3 0 .pz
    figures @ figures wrap @ 1 - + @
    swap 2dup 4 0 .pz 4 0 .pz / . cr
  next
;
